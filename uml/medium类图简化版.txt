@startuml


class Medium {
}


class GenericMediaServer {
}
Medium <|.. GenericMediaServer

class ClientConnection {
}
GenericMediaServer +--> ClientConnection


class ClientSession {
}
GenericMediaServer +--> ClientSession


class RTSPServer {
}
GenericMediaServer <|.. RTSPServer


class RTSPServerWithREGISTERProxying {
}
RTSPServer <|-- RTSPServerWithREGISTERProxying


class RTSPClientConnection {
}
RTSPServer +--> RTSPClientConnection
ClientConnection <|-- RTSPClientConnection


class RTSPClientSession {
}
RTSPServer +--> RTSPClientSession
ClientSession <|-- RTSPClientSession


class streamState {
}
RTSPClientSession +--> streamState


class ServerMediaSessionIterator {
}
RTSPServer +--> ServerMediaSessionIterator


class ParamsForREGISTER {
}
RTSPClientConnection +--> ParamsForREGISTER


class RTSPServerSupportingHTTPStreaming {
}
RTSPServer <|-- RTSPServerSupportingHTTPStreaming


class RTSPClientConnectionSupportingHTTPStreaming {
}
RTSPServerSupportingHTTPStreaming +--> RTSPClientConnectionSupportingHTTPStreaming
RTSPClientConnection <|-- RTSPClientConnectionSupportingHTTPStreaming


class DynamicRTSPServer {
}
RTSPServerSupportingHTTPStreaming <|-- DynamicRTSPServer


class RTSPClient {
}
Medium <|.. RTSPClient


class RequestQueue {
}
RTSPClient *-- RequestQueue


class RequestRecord {
}
RTSPClient *-- RequestRecord


class ProxyRTSPClient {
}
RTSPClient <|-- ProxyRTSPClient
ProxyRTSPClient --> ProxyServerMediaSession
ProxyRTSPClient --> ProxyServerMediaSubsession


class ServerMediaSession {
}
Medium <|.. ServerMediaSession


class ServerMediaSubsession {
}
Medium <|.. ServerMediaSubsession



class ServerMediaSubsessionIterator {
}
ServerMediaSubsessionIterator <--ServerMediaSubsession


class ProxyServerMediaSession {
}
ServerMediaSession <|-- ProxyServerMediaSession
ProxyServerMediaSession --> ProxyServerMediaSubsession
ProxyServerMediaSession --> ProxyRTSPClient


class FramedSource {
}


class FramedFilter {
}
FramedSource <|.. FramedFilter


class PresentationTimeSubsessionNormalizer {
}
FramedFilter <|-- PresentationTimeSubsessionNormalizer


class PresentationTimeSessionNormalizer {
}
Medium <|-- PresentationTimeSessionNormalizer


class OnDemandServerMediaSubsession {
}
ServerMediaSubsession <|-- OnDemandServerMediaSubsession


class Destinations {
}
Destinations <-- OnDemandServerMediaSubsession
Destinations <-- StreamState


class StreamState {
}
StreamState <-- OnDemandServerMediaSubsession


class ProxyServerMediaSubsession {
}
OnDemandServerMediaSubsession <|-- ProxyServerMediaSubsession


class HandlerServerForREGISTERCommand {
}
RTSPServer <|-- HandlerServerForREGISTERCommand


@enduml