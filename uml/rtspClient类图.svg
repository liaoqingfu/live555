<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="4057px" preserveAspectRatio="none" style="width:4633px;height:4057px;" version="1.1" viewBox="0 0 4633 4057" width="4633px" zoomAndPan="magnify"><defs><filter height="300%" id="fu4iza8y9bfla" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--class Medium--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="348.459" id="Medium" style="stroke: #A80036; stroke-width: 1.5;" width="544" x="1512" y="113.5"/><ellipse cx="1757.75" cy="129.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1756.3281,134.8594 Q1754.4688,134.8594 1753.375,133.4688 Q1752.2813,132.0781 1752.2813,129.0938 Q1752.2813,126.5625 1753.4453,124.9063 Q1754.6094,123.25 1756.5938,123.25 Q1758.0625,123.25 1758.5313,123.375 Q1759,123.5781 1759,123.5781 Q1759,123.5781 1759,123.5078 Q1759,123.4375 1759.6094,122.5156 L1760.6563,126.1719 L1759.3281,126.5781 Q1758.8594,125.0313 1758.1953,124.3672 Q1757.5313,123.7031 1756.4688,123.7031 Q1756.0781,123.7031 1755.3125,125.2344 Q1754.5469,126.7656 1754.5469,129.0156 Q1754.5469,131.4844 1755.2109,132.875 Q1755.875,134.2656 1756.4063,134.2656 Q1757.4688,134.2656 1758.2266,133.5 Q1758.9844,132.7344 1759.3281,131.0781 L1760.6563,131.6719 Q1760.3281,133.0781 1759.4297,133.9688 Q1758.5313,134.8594 1756.3281,134.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="44" x="1778.25" y="135.0576">Medium</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1513" x2="2055" y1="145.5" y2="145.5"/><polygon fill="none" points="1523,153.5115,1527,157.5115,1523,161.5115,1519,157.5115" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="1532" y="162.106">friend class MediaLookupTable;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1520" y="170.5344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1532" y="177.1289">UsageEnvironment&amp; fEnviron;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1520" y="185.5574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="1532" y="192.1519">char fMediumName[mediumNameMaxLen];</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1520" y="200.5803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="1532" y="207.1748">TaskToken fNextTask;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1513" x2="2055" y1="213.5918" y2="213.5918"/><ellipse cx="1523" cy="226.6033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="518" x="1532" y="230.1978">static Boolean lookupByName(UsageEnvironment&amp; env, char const* mediumName, Medium*&amp; resultMedium);</text><ellipse cx="1523" cy="241.6262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="335" x="1532" y="245.2207">static void close(UsageEnvironment&amp; env, char const* mediumName);</text><ellipse cx="1523" cy="256.6492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="356" x="1532" y="260.2437">static void close(Medium* medium); // alternative close() method using ptrs</text><ellipse cx="1523" cy="271.6721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="254" x="1532" y="275.2666">UsageEnvironment&amp; envir() const { return fEnviron; }</text><ellipse cx="1523" cy="286.6951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="1532" y="290.2896">char const* name() const { return fMediumName; }</text><ellipse cx="1523" cy="301.718" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="1532" y="305.3125">virtual Boolean isSource() const;</text><ellipse cx="1523" cy="316.741" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1532" y="320.3354">virtual Boolean isSink() const;</text><ellipse cx="1523" cy="331.7639" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1532" y="335.3584">virtual Boolean isRTCPInstance() const;</text><ellipse cx="1523" cy="346.7869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="1532" y="350.3813">virtual Boolean isRTSPClient() const;</text><ellipse cx="1523" cy="361.8098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="1532" y="365.4043">virtual Boolean isRTSPServer() const;</text><ellipse cx="1523" cy="376.8328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="190" x="1532" y="380.4272">virtual Boolean isMediaSession() const;</text><ellipse cx="1523" cy="391.8557" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1532" y="395.4502">virtual Boolean isServerMediaSession() const;</text><ellipse cx="1523" cy="406.8787" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="193" x="1532" y="410.4731">virtual Boolean isDarwinInjector() const;</text><polygon fill="#FFFF44" points="1523,416.9016,1527,420.9016,1523,424.9016,1519,420.9016" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="1532" y="425.4961">Medium(UsageEnvironment&amp; env);</text><polygon fill="#FFFF44" points="1523,431.9246,1527,435.9246,1523,439.9246,1519,435.9246" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="85" x="1532" y="440.519">virtual ~Medium();</text><polygon fill="#FFFF44" points="1523,446.9475,1527,450.9475,1523,454.9475,1519,450.9475" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="1532" y="455.542">TaskToken&amp; nextTask();</text><!--class RTSPClient--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="1940.8916" id="RTSPClient" style="stroke: #A80036; stroke-width: 1.5;" width="714" x="316" y="627"/><ellipse cx="636.75" cy="643" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M635.3281,648.3594 Q633.4688,648.3594 632.375,646.9688 Q631.2813,645.5781 631.2813,642.5938 Q631.2813,640.0625 632.4453,638.4063 Q633.6094,636.75 635.5938,636.75 Q637.0625,636.75 637.5313,636.875 Q638,637.0781 638,637.0781 Q638,637.0781 638,637.0078 Q638,636.9375 638.6094,636.0156 L639.6563,639.6719 L638.3281,640.0781 Q637.8594,638.5313 637.1953,637.8672 Q636.5313,637.2031 635.4688,637.2031 Q635.0781,637.2031 634.3125,638.7344 Q633.5469,640.2656 633.5469,642.5156 Q633.5469,644.9844 634.2109,646.375 Q634.875,647.7656 635.4063,647.7656 Q636.4688,647.7656 637.2266,647 Q637.9844,646.2344 638.3281,644.5781 L639.6563,645.1719 Q639.3281,646.5781 638.4297,647.4688 Q637.5313,648.3594 635.3281,648.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="64" x="657.25" y="648.5576">RTSPClient</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="317" x2="1029" y1="659" y2="659"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="336" y="675.606">int verbosityLevel = 0,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="336" y="690.6289">char const* applicationName = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="336" y="705.6519">portNumBits tunnelOverHTTPPortNum = 0,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="336" y="720.6748">Boolean streamOutgoing = False,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="336" y="735.6978">Boolean streamUsingTCP = False,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="222" x="336" y="750.7207">Boolean forceMulticastOnUnspecified = False,</text><ellipse cx="327" cy="762.1492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="336" y="765.7437">double start = 0.0f, double end = -1.0f, float scale = 1.0f,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="336" y="780.7666">double start = 0.0f, double end = -1.0f, float scale = 1.0f,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="336" y="795.7896">char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="336" y="810.8125">char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="336" y="825.8354">char const* parameterName, char const* parameterValue,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="336" y="840.8584">char const* sourceName,</text><ellipse cx="327" cy="852.2869" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="336" y="855.8813">static unsigned responseBufferSize;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="241" x="336" y="870.9043">char*&amp; cmdURL, Boolean&amp; cmdURLWasAllocated,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="336" y="885.9272">char const*&amp; protocolStr,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="336" y="900.9502">char*&amp; serverAddressStr, portNumBits&amp; serverPortNum,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="336" y="915.9731">char const* scaleParamsStr, const char* speedParamsStr,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="336" y="930.9961">char const*&amp; prefix,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="336" y="946.019">char const*&amp; separator,</text><ellipse cx="327" cy="957.4475" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="336" y="961.042">u_int16_t desiredMaxIncomingPacketSize;</text><polygon fill="none" points="327,967.4705,331,971.4705,327,975.4705,323,971.4705" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="336" y="976.0649">int fVerbosityLevel;</text><polygon fill="none" points="327,982.4934,331,986.4934,327,990.4934,323,986.4934" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="336" y="991.0879">unsigned fCSeq;</text><polygon fill="none" points="327,997.5164,331,1001.5164,327,1005.5164,323,1001.5164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="336" y="1006.1108">Authenticator fCurrentAuthenticator;</text><polygon fill="none" points="327,1012.5393,331,1016.5393,327,1020.5393,323,1016.5393" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="336" y="1021.1338">Boolean fAllowBasicAuthentication;</text><polygon fill="none" points="327,1027.5623,331,1031.5623,327,1035.5623,323,1031.5623" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="336" y="1036.1567">netAddressBits fServerAddress;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1044.5852"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="336" y="1051.1797">portNumBits fTunnelOverHTTPPortNum;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1059.6082"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="137" x="336" y="1066.2026">char* fUserAgentHeaderStr;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1074.6311"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="173" x="336" y="1081.2256">unsigned fUserAgentHeaderStrLen;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1089.6541"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="336" y="1096.2485">int fInputSocketNum, fOutputSocketNum;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1104.677"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="336" y="1111.2715">char* fBaseURL;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1119.7"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="336" y="1126.2944">char* fLastSessionId;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1134.7229"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="410" x="336" y="1141.3174">unsigned fSessionTimeoutParameter; // optionally set in response "Session:" headers</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1149.7458"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="336" y="1156.3403">char* fResponseBuffer;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1164.7688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="336" y="1171.3633">unsigned fResponseBytesAlreadySeen, fResponseBufferBytesLeft;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1179.7917"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="543" x="336" y="1186.3862">RequestQueue fRequestsAwaitingConnection, fRequestsAwaitingHTTPTunneling, fRequestsAwaitingResponse;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1194.8147"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="336" y="1201.4092">char fSessionCookie[33];</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1209.8376"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="336" y="1216.4321">unsigned fSessionCookieCounter;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1224.8606"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="336" y="1231.4551">Boolean fHTTPTunnelingConnectionIsPending;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="317" x2="1029" y1="1237.8721" y2="1237.8721"/><ellipse cx="327" cy="1250.8835" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="371" x="336" y="1254.478">static RTSPClient* createNew(UsageEnvironment&amp; env, char const* rtspURL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="336" y="1269.501">int socketNumToServer = -1);</text><ellipse cx="327" cy="1280.9294" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="262" x="336" y="1284.5239">typedef void(responseHandler)(RTSPClient* rtspClient,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="336" y="1299.5469">int resultCode, char* resultString);</text><ellipse cx="327" cy="1310.9753" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="524" x="336" y="1314.5698">unsigned sendDescribeCommand(responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1325.9983" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="518" x="336" y="1329.5928">unsigned sendOptionsCommand(responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1341.0212" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="668" x="336" y="1344.6157">unsigned sendAnnounceCommand(char const* sdpDescription, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1356.0442" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="483" x="336" y="1359.6387">unsigned sendSetupCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1374.6616">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1386.0901" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="336" y="1389.6846">unsigned sendPlayCommand(MediaSession&amp; session, responseHandler* responseHandler,</text><ellipse cx="327" cy="1401.113" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1404.7075">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1416.136" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="475" x="336" y="1419.7305">unsigned sendPlayCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1434.7534">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1446.1819" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="439" x="336" y="1449.7764">unsigned sendPlayCommand(MediaSession&amp; session, responseHandler* responseHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1464.7993">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1476.2278" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="475" x="336" y="1479.8223">unsigned sendPlayCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1494.8452">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1506.2737" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="632" x="336" y="1509.8682">unsigned sendPauseCommand(MediaSession&amp; session, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1521.2966" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="668" x="336" y="1524.8911">unsigned sendPauseCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1536.3196" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="637" x="336" y="1539.9141">unsigned sendRecordCommand(MediaSession&amp; session, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1551.3425" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="673" x="336" y="1554.937">unsigned sendRecordCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1566.3655" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="652" x="336" y="1569.96">unsigned sendTeardownCommand(MediaSession&amp; session, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1581.3884" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="688" x="336" y="1584.9829">unsigned sendTeardownCommand(MediaSubsession&amp; subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1596.4114" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="484" x="336" y="1600.0059">unsigned sendSetParameterCommand(MediaSession&amp; session, responseHandler* responseHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1615.0288">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1626.4573" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="626" x="336" y="1630.0518">unsigned sendGetParameterCommand(MediaSession&amp; session, responseHandler* responseHandler, char const* parameterName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="180" x="336" y="1645.0747">Authenticator* authenticator = NULL);</text><ellipse cx="327" cy="1656.5032" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="336" y="1660.0977">void sendDummyUDPPackets(MediaSession&amp; session, unsigned numDummyPackets = 2);</text><ellipse cx="327" cy="1671.5261" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="466" x="336" y="1675.1206">void sendDummyUDPPackets(MediaSubsession&amp; subsession, unsigned numDummyPackets = 2);</text><ellipse cx="327" cy="1686.5491" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="336" y="1690.1436">void setSpeed(MediaSession&amp; session, float speed = 1.0f);</text><ellipse cx="327" cy="1701.572" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="450" x="336" y="1705.1665">Boolean changeResponseHandler(unsigned cseq, responseHandler* newResponseHandler);</text><ellipse cx="327" cy="1716.595" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="238" x="336" y="1720.1895">int socketNum() const { return fInputSocketNum; }</text><ellipse cx="327" cy="1731.6179" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="336" y="1735.2124">static Boolean lookupByName(UsageEnvironment&amp; env,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="336" y="1750.2354">RTSPClient*&amp; resultClient);</text><ellipse cx="327" cy="1761.6638" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="336" y="1765.2583">static Boolean parseRTSPURL(UsageEnvironment&amp; env, char const* url,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="559" x="336" y="1780.2813">char*&amp; username, char*&amp; password, NetAddress&amp; address, portNumBits&amp; portNum, char const** urlSuffix = NULL);</text><ellipse cx="327" cy="1791.7097" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="336" y="1795.3042">void setUserAgentString(char const* userAgentName);</text><ellipse cx="327" cy="1806.7327" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="353" x="336" y="1810.3271">void disallowBasicAuthentication() { fAllowBasicAuthentication = False; }</text><ellipse cx="327" cy="1821.7556" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="336" y="1825.3501">unsigned sessionTimeoutParameter() const { return fSessionTimeoutParameter; }</text><ellipse cx="327" cy="1836.7786" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="336" y="1840.373">char const* url() const { return fBaseURL; }</text><polygon fill="#FFFF44" points="327,1846.8015,331,1850.8015,327,1854.8015,323,1850.8015" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="336" y="1855.396">RTSPClient(UsageEnvironment&amp; env, char const* rtspURL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="538" x="336" y="1870.4189">int verbosityLevel, char const* applicationName, portNumBits tunnelOverHTTPPortNum, int socketNumToServer);</text><polygon fill="#FFFF44" points="327,1876.8474,331,1880.8474,327,1884.8474,323,1880.8474" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="336" y="1885.4419">virtual ~RTSPClient();</text><polygon fill="#FFFF44" points="327,1891.8704,331,1895.8704,327,1899.8704,323,1895.8704" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="336" y="1900.4648">void reset();</text><polygon fill="#FFFF44" points="327,1906.8933,331,1910.8933,327,1914.8933,323,1910.8933" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="336" y="1915.4878">void setBaseURL(char const* url);</text><polygon fill="#FFFF44" points="327,1921.9163,331,1925.9163,327,1929.9163,323,1925.9163" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="533" x="336" y="1930.5107">int grabSocket(); // allows a subclass to reuse our input socket, so that it won't get closed when we're deleted</text><polygon fill="#FFFF44" points="327,1936.9392,331,1940.9392,327,1944.9392,323,1940.9392" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="336" y="1945.5337">virtual unsigned sendRequest(RequestRecord* request);</text><polygon fill="#FFFF44" points="327,1951.9622,331,1955.9622,327,1959.9622,323,1955.9622" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="336" y="1960.5566">virtual Boolean setRequestFields(RequestRecord* request,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="336" y="1975.5796">char*&amp; extraHeaders, Boolean&amp; extraHeadersWereAllocated);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1984.0081"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="336" y="1990.6025">virtual Boolean isRTSPClient() const;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="1999.031"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="117" x="336" y="2005.6255">void resetTCPSockets();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2014.054"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="336" y="2020.6484">void resetResponseBuffer();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2029.0769"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="336" y="2035.6714">int openConnection(); // -1: failure; 0: pending; 1: success</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2044.0999"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="645" x="336" y="2050.6943">int connectToServer(int socketNum, portNumBits remotePortNum); // used to implement "openConnection()"; result values are the same</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2059.1228"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="336" y="2065.7173">char* createAuthenticatorString(char const* cmd, char const* url);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2074.1458"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="336" y="2080.7402">char* createBlocksizeString(Boolean streamUsingTCP);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2089.1687"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="336" y="2095.7632">void handleRequestError(RequestRecord* request);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2104.1917"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="507" x="336" y="2110.7861">Boolean parseResponseCode(char const* line, unsigned&amp; responseCode, char const*&amp; responseString);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2119.2146"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="336" y="2125.8091">void handleIncomingRequest();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2134.2375"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="652" x="336" y="2140.832">static Boolean checkForHeader(char const* line, char const* headerName, unsigned headerNameLength, char const*&amp; headerParams);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2149.2605"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="336" y="2155.855">Boolean parseTransportParams(char const* paramsStr,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="336" y="2170.8779">unsigned char&amp; rtpChannelId, unsigned char&amp; rtcpChannelId);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2179.3064"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="336" y="2185.9009">Boolean parseScaleParam(char const* paramStr, float&amp; scale);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2194.3293"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="312" x="336" y="2200.9238">Boolean parseSpeedParam(char const* paramStr, float&amp; speed);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2209.3523"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="336" y="2215.9468">Boolean parseRTPInfoParams(char const*&amp; paramStr, u_int16_t&amp; seqNum, u_int32_t&amp; timestamp);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2224.3752"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="625" x="336" y="2230.9697">Boolean handleSETUPResponse(MediaSubsession&amp; subsession, char const* sessionParamsStr, char const* transportParamsStr,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="336" y="2245.9927">Boolean streamUsingTCP);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2254.4211"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="430" x="336" y="2261.0156">Boolean handlePLAYResponse(MediaSession&amp; session, MediaSubsession&amp; subsession,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="290" x="336" y="2276.0386">char const* rangeParamsStr, char const* rtpInfoParamsStr);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2284.467"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="465" x="336" y="2291.0615">Boolean handleTEARDOWNResponse(MediaSession&amp; session, MediaSubsession&amp; subsession);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2299.49"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="482" x="336" y="2306.0845">Boolean handleGET_PARAMETERResponse(char const* parameterName, char*&amp; resultValueString);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2314.5129"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="386" x="336" y="2321.1074">Boolean handleAuthenticationFailure(char const* wwwAuthenticateParamsStr);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2329.5359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="336" y="2336.1304">Boolean resendCommand(RequestRecord* request);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2344.5588"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="336" y="2351.1533">char const* sessionURL(MediaSession const&amp; session) const;</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2359.5818"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="336" y="2366.1763">static void handleAlternativeRequestByte(void*, u_int8_t requestByte);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2374.6047"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="336" y="2381.1992">void handleAlternativeRequestByte1(u_int8_t requestByte);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2389.6277"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="336" y="2396.2222">void constructSubsessionURL(MediaSubsession const&amp; subsession,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="336" y="2411.2451">char const*&amp; suffix);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2419.6736"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="336" y="2426.2681">Boolean setupHTTPTunneling1(); // send the HTTP "GET"</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2434.6965"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="517" x="336" y="2441.291">static void responseHandlerForHTTP_GET(RTSPClient* rtspClient, int responseCode, char* responseString);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2449.7195"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="384" x="336" y="2456.314">void responseHandlerForHTTP_GET1(int responseCode, char* responseString);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2464.7424"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="277" x="336" y="2471.3369">Boolean setupHTTPTunneling2(); // send the HTTP "POST"</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2479.7654"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="236" x="336" y="2486.3599">static void connectionHandler(void*, int /*mask*/);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2494.7883"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="130" x="336" y="2501.3828">void connectionHandler1();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2509.8113"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="336" y="2516.4058">static void incomingDataHandler(void*, int /*mask*/);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2524.8342"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="336" y="2531.4287">void incomingDataHandler1();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2539.8572"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="336" y="2546.4517">void handleResponseBytes(int newBytesRead);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="324" y="2554.8801"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="313" x="336" y="2561.4746">unsigned char fTCPStreamIdCount; // used for (optional) RTP/TCP</text><!--class RequestQueue--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="198.2295" id="RequestQueue" style="stroke: #A80036; stroke-width: 1.5;" width="268" x="6" y="3049"/><ellipse cx="93.75" cy="3065" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M92.3281,3070.3594 Q90.4688,3070.3594 89.375,3068.9688 Q88.2813,3067.5781 88.2813,3064.5938 Q88.2813,3062.0625 89.4453,3060.4063 Q90.6094,3058.75 92.5938,3058.75 Q94.0625,3058.75 94.5313,3058.875 Q95,3059.0781 95,3059.0781 Q95,3059.0781 95,3059.0078 Q95,3058.9375 95.6094,3058.0156 L96.6563,3061.6719 L95.3281,3062.0781 Q94.8594,3060.5313 94.1953,3059.8672 Q93.5313,3059.2031 92.4688,3059.2031 Q92.0781,3059.2031 91.3125,3060.7344 Q90.5469,3062.2656 90.5469,3064.5156 Q90.5469,3066.9844 91.2109,3068.375 Q91.875,3069.7656 92.4063,3069.7656 Q93.4688,3069.7656 94.2266,3069 Q94.9844,3068.2344 95.3281,3066.5781 L96.6563,3067.1719 Q96.3281,3068.5781 95.4297,3069.4688 Q94.5313,3070.3594 92.3281,3070.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="84" x="114.25" y="3070.5576">RequestQueue</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="273" y1="3081" y2="3081"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="3091.0115"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="114" x="26" y="3097.606">RequestRecord* fHead;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="3106.0344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="26" y="3112.6289">RequestRecord* fTail;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="273" y1="3119.0459" y2="3119.0459"/><ellipse cx="17" cy="3132.0574" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="26" y="3135.6519">RequestQueue();</text><ellipse cx="17" cy="3147.0803" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="26" y="3150.6748">RequestQueue(RequestQueue&amp; origQueue);</text><ellipse cx="17" cy="3162.1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="26" y="3165.6978">virtual ~RequestQueue();</text><ellipse cx="17" cy="3177.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="26" y="3180.7207">void enqueue(RequestRecord* request);</text><ellipse cx="17" cy="3192.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="26" y="3195.7437">RequestRecord* dequeue();</text><ellipse cx="17" cy="3207.1721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="26" y="3210.7666">void putAtHead(RequestRecord* request);</text><ellipse cx="17" cy="3222.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="26" y="3225.7896">RequestRecord* findByCSeq(unsigned cseq);</text><ellipse cx="17" cy="3237.218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="242" x="26" y="3240.8125">Boolean isEmpty() const { return fHead == NULL; }</text><!--class RequestRecord--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="513.7114" id="RequestRecord" style="stroke: #A80036; stroke-width: 1.5;" width="506" x="309" y="2891"/><ellipse cx="514.25" cy="2907" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M512.8281,2912.3594 Q510.9688,2912.3594 509.875,2910.9688 Q508.7813,2909.5781 508.7813,2906.5938 Q508.7813,2904.0625 509.9453,2902.4063 Q511.1094,2900.75 513.0938,2900.75 Q514.5625,2900.75 515.0313,2900.875 Q515.5,2901.0781 515.5,2901.0781 Q515.5,2901.0781 515.5,2901.0078 Q515.5,2900.9375 516.1094,2900.0156 L517.1563,2903.6719 L515.8281,2904.0781 Q515.3594,2902.5313 514.6953,2901.8672 Q514.0313,2901.2031 512.9688,2901.2031 Q512.5781,2901.2031 511.8125,2902.7344 Q511.0469,2904.2656 511.0469,2906.5156 Q511.0469,2908.9844 511.7109,2910.375 Q512.375,2911.7656 512.9063,2911.7656 Q513.9688,2911.7656 514.7266,2911 Q515.4844,2910.2344 515.8281,2908.5781 L517.1563,2909.1719 Q516.8281,2910.5781 515.9297,2911.4688 Q515.0313,2912.3594 512.8281,2912.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="87" x="534.75" y="2912.5576">RequestRecord</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="310" x2="814" y1="2923" y2="2923"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="480" x="329" y="2939.606">MediaSession* session = NULL, MediaSubsession* subsession = NULL, u_int32_t booleanFlags = 0,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="373" x="329" y="2954.6289">char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="2963.0574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="111" x="329" y="2969.6519">RequestRecord* fNext;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="2978.0803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="329" y="2984.6748">unsigned fCSeq;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="2993.1033"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="329" y="2999.6978">char const* fCommandName;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3008.1262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="329" y="3014.7207">MediaSession* fSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3023.1492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="329" y="3029.7437">MediaSubsession* fSubsession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3038.1721"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="329" y="3044.7666">u_int32_t fBooleanFlags;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3053.1951"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="93" x="329" y="3059.7896">double fStart, fEnd;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3068.218"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="175" x="329" y="3074.8125">char *fAbsStartTime, *fAbsEndTime;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3083.241"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="329" y="3089.8354">float fScale;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3098.2639"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="329" y="3104.8584">char* fContentStr;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="317" y="3113.2869"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="329" y="3119.8813">responseHandler* fHandler;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="310" x2="814" y1="3126.2983" y2="3126.2983"/><ellipse cx="320" cy="3139.3098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="423" x="329" y="3142.9043">RequestRecord(unsigned cseq, char const* commandName, responseHandler* handler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="429" x="329" y="3157.9272">double start = 0.0f, double end = -1.0f, float scale = 1.0f, char const* contentStr = NULL);</text><ellipse cx="320" cy="3169.3557" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="329" y="3172.9502">RequestRecord(unsigned cseq, responseHandler* handler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="349" x="329" y="3187.9731">MediaSession* session = NULL, MediaSubsession* subsession = NULL);</text><ellipse cx="320" cy="3199.4016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="329" y="3202.9961">virtual ~RequestRecord();</text><ellipse cx="320" cy="3214.4246" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="329" y="3218.019">RequestRecord*&amp; next() { return fNext; }</text><ellipse cx="320" cy="3229.4475" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="329" y="3233.042">unsigned&amp; cseq() { return fCSeq; }</text><ellipse cx="320" cy="3244.4705" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="300" x="329" y="3248.0649">char const* commandName() const { return fCommandName; }</text><ellipse cx="320" cy="3259.4934" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="245" x="329" y="3263.0879">MediaSession* session() const { return fSession; }</text><ellipse cx="320" cy="3274.5164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="299" x="329" y="3278.1108">MediaSubsession* subsession() const { return fSubsession; }</text><ellipse cx="320" cy="3289.5393" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="270" x="329" y="3293.1338">u_int32_t booleanFlags() const { return fBooleanFlags; }</text><ellipse cx="320" cy="3304.5623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="329" y="3308.1567">double start() const { return fStart; }</text><ellipse cx="320" cy="3319.5852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="329" y="3323.1797">double end() const { return fEnd; }</text><ellipse cx="320" cy="3334.6082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="281" x="329" y="3338.2026">char const* absStartTime() const { return fAbsStartTime; }</text><ellipse cx="320" cy="3349.6311" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="271" x="329" y="3353.2256">char const* absEndTime() const { return fAbsEndTime; }</text><ellipse cx="320" cy="3364.6541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="171" x="329" y="3368.2485">float scale() const { return fScale; }</text><ellipse cx="320" cy="3379.677" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="224" x="329" y="3383.2715">char* contentStr() const { return fContentStr; }</text><ellipse cx="320" cy="3394.7" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="329" y="3398.2944">responseHandler*&amp; handler() { return fHandler; }</text><!--class ProxyRTSPClient--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="438.5967" id="ProxyRTSPClient" style="stroke: #A80036; stroke-width: 1.5;" width="500" x="850" y="2928.5"/><ellipse cx="1049.25" cy="2944.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1047.8281,2949.8594 Q1045.9688,2949.8594 1044.875,2948.4688 Q1043.7813,2947.0781 1043.7813,2944.0938 Q1043.7813,2941.5625 1044.9453,2939.9063 Q1046.1094,2938.25 1048.0938,2938.25 Q1049.5625,2938.25 1050.0313,2938.375 Q1050.5,2938.5781 1050.5,2938.5781 Q1050.5,2938.5781 1050.5,2938.5078 Q1050.5,2938.4375 1051.1094,2937.5156 L1052.1563,2941.1719 L1050.8281,2941.5781 Q1050.3594,2940.0313 1049.6953,2939.3672 Q1049.0313,2938.7031 1047.9688,2938.7031 Q1047.5781,2938.7031 1046.8125,2940.2344 Q1046.0469,2941.7656 1046.0469,2944.0156 Q1046.0469,2946.4844 1046.7109,2947.875 Q1047.375,2949.2656 1047.9063,2949.2656 Q1048.9688,2949.2656 1049.7266,2948.5 Q1050.4844,2947.7344 1050.8281,2946.0781 L1052.1563,2946.6719 Q1051.8281,2948.0781 1050.9297,2948.9688 Q1050.0313,2949.8594 1047.8281,2949.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="93" x="1069.75" y="2950.0576">ProxyRTSPClient</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="851" x2="1349" y1="2960.5" y2="2960.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="870" y="2977.106">char const* username, char const* password,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="2985.5344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="870" y="2992.1289">friend class ProxyServerMediaSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3000.5574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="870" y="3007.1519">friend class ProxyServerMediaSubsession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3015.5803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="263" x="870" y="3022.1748">ProxyServerMediaSession&amp; fOurServerMediaSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3030.6033"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="74" x="870" y="3037.1978">char* fOurURL;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3045.6262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="870" y="3052.2207">Authenticator* fOurAuthenticator;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3060.6492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="870" y="3067.2437">Boolean fStreamRTPOverTCP;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3075.6721"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="364" x="870" y="3082.2666">class ProxyServerMediaSubsession *fSetupQueueHead, *fSetupQueueTail;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3090.6951"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="134" x="870" y="3097.2896">unsigned fNumSetupsDone;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3105.718"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="217" x="870" y="3112.3125">unsigned fNextDESCRIBEDelay; // in seconds</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3120.741"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="870" y="3127.3354">Boolean fServerSupportsGetParameter, fLastCommandWasPLAY;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3135.7639"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="421" x="870" y="3142.3584">TaskToken fLivenessCommandTask, fDESCRIBECommandTask, fSubsessionTimerTask;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="851" x2="1349" y1="3148.7754" y2="3148.7754"/><ellipse cx="861" cy="3161.7869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="870" y="3165.3813">ProxyRTSPClient(class ProxyServerMediaSession&amp; ourServerMediaSession, char const* rtspURL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="395" x="870" y="3180.4043">portNumBits tunnelOverHTTPPortNum, int verbosityLevel, int socketNumToServer);</text><ellipse cx="861" cy="3191.8328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="870" y="3195.4272">virtual ~ProxyRTSPClient();</text><ellipse cx="861" cy="3206.8557" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="870" y="3210.4502">void continueAfterDESCRIBE(char const* sdpDescription);</text><ellipse cx="861" cy="3221.8787" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="870" y="3225.4731">void continueAfterLivenessCommand(int resultCode, Boolean serverSupportsGetParameter);</text><ellipse cx="861" cy="3236.9016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="870" y="3240.4961">void continueAfterSETUP();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3248.9246"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="870" y="3255.519">void reset();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3263.9475"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="240" x="870" y="3270.542">Authenticator* auth() { return fOurAuthenticator; }</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3278.9705"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="870" y="3285.5649">void scheduleLivenessCommand();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3293.9934"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="870" y="3300.5879">static void sendLivenessCommand(void* clientData);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3309.0164"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="870" y="3315.6108">void scheduleDESCRIBECommand();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3324.0393"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="870" y="3330.6338">static void sendDESCRIBE(void* clientData);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3339.0623"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="870" y="3345.6567">static void subsessionTimeout(void* clientData);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="858" y="3354.0852"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="870" y="3360.6797">void handleSubsessionTimeout();</text><!--class ServerMediaSession--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="603.8491" id="ServerMediaSession" style="stroke: #A80036; stroke-width: 1.5;" width="419" x="1288.5" y="1295.5"/><ellipse cx="1436.75" cy="1311.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1435.3281,1316.8594 Q1433.4688,1316.8594 1432.375,1315.4688 Q1431.2813,1314.0781 1431.2813,1311.0938 Q1431.2813,1308.5625 1432.4453,1306.9063 Q1433.6094,1305.25 1435.5938,1305.25 Q1437.0625,1305.25 1437.5313,1305.375 Q1438,1305.5781 1438,1305.5781 Q1438,1305.5781 1438,1305.5078 Q1438,1305.4375 1438.6094,1304.5156 L1439.6563,1308.1719 L1438.3281,1308.5781 Q1437.8594,1307.0313 1437.1953,1306.3672 Q1436.5313,1305.7031 1435.4688,1305.7031 Q1435.0781,1305.7031 1434.3125,1307.2344 Q1433.5469,1308.7656 1433.5469,1311.0156 Q1433.5469,1313.4844 1434.2109,1314.875 Q1434.875,1316.2656 1435.4063,1316.2656 Q1436.4688,1316.2656 1437.2266,1315.5 Q1437.9844,1314.7344 1438.3281,1313.0781 L1439.6563,1313.6719 Q1439.3281,1315.0781 1438.4297,1315.9688 Q1437.5313,1316.8594 1435.3281,1316.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="114" x="1457.25" y="1317.0576">ServerMediaSession</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1289.5" x2="1706.5" y1="1327.5" y2="1327.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1308.5" y="1344.106">char const* streamName = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="1308.5" y="1359.1289">char const* info = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="153" x="1308.5" y="1374.1519">char const* description = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="113" x="1308.5" y="1389.1748">Boolean isSSM = False,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="1308.5" y="1404.1978">char const* mediumName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="198" x="1308.5" y="1419.2207">char const* info, char const* description,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1427.6492"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="79" x="1308.5" y="1434.2437">Boolean fIsSSM;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1442.6721"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="1308.5" y="1449.2666">friend class ServerMediaSubsessionIterator;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1457.6951"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="1308.5" y="1464.2896">ServerMediaSubsession* fSubsessionsHead;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1472.718"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="211" x="1308.5" y="1479.3125">ServerMediaSubsession* fSubsessionsTail;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1487.741"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1308.5" y="1494.3354">unsigned fSubsessionCounter;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1502.7639"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="97" x="1308.5" y="1509.3584">char* fStreamName;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1517.7869"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="1308.5" y="1524.3813">char* fInfoSDPString;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1532.8098"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1308.5" y="1539.4043">char* fDescriptionSDPString;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1547.8328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1308.5" y="1554.4272">char* fMiscSDPLines;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1562.8557"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="1308.5" y="1569.4502">struct timeval fCreationTime;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1577.8787"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="1308.5" y="1584.4731">unsigned fReferenceCount;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1592.9016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1308.5" y="1599.4961">Boolean fDeleteWhenUnreferenced;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1289.5" x2="1706.5" y1="1605.9131" y2="1605.9131"/><ellipse cx="1299.5" cy="1618.9246" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="1308.5" y="1622.519">static ServerMediaSession* createNew(UsageEnvironment&amp; env,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="1308.5" y="1637.542">char const* miscSDPLines = NULL);</text><ellipse cx="1299.5" cy="1648.9705" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="1308.5" y="1652.5649">static Boolean lookupByName(UsageEnvironment&amp; env,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="187" x="1308.5" y="1667.5879">ServerMediaSession*&amp; resultSession);</text><ellipse cx="1299.5" cy="1679.0164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="1308.5" y="1682.6108">char* generateSDPDescription(); // based on the entire session</text><ellipse cx="1299.5" cy="1694.0393" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="1308.5" y="1697.6338">char const* streamName() const { return fStreamName; }</text><ellipse cx="1299.5" cy="1709.0623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="1308.5" y="1712.6567">Boolean addSubsession(ServerMediaSubsession* subsession);</text><ellipse cx="1299.5" cy="1724.0852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="319" x="1308.5" y="1727.6797">unsigned numSubsessions() const { return fSubsessionCounter; }</text><ellipse cx="1299.5" cy="1739.1082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="380" x="1308.5" y="1742.7026">void testScaleFactor(float&amp; scale); // sets "scale" to the actual supported scale</text><ellipse cx="1299.5" cy="1754.1311" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="1308.5" y="1757.7256">float duration() const;</text><ellipse cx="1299.5" cy="1769.1541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="296" x="1308.5" y="1772.7485">unsigned referenceCount() const { return fReferenceCount; }</text><ellipse cx="1299.5" cy="1784.177" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="272" x="1308.5" y="1787.7715">void incrementReferenceCount() { ++fReferenceCount; }</text><ellipse cx="1299.5" cy="1799.2" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="1308.5" y="1802.7944">void decrementReferenceCount() { if (fReferenceCount &gt; 0) --fReferenceCount; }</text><ellipse cx="1299.5" cy="1814.2229" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="1308.5" y="1817.8174">Boolean&amp; deleteWhenUnreferenced() { return fDeleteWhenUnreferenced; }</text><ellipse cx="1299.5" cy="1829.2458" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="1308.5" y="1832.8403">void deleteAllSubsessions();</text><polygon fill="#FFFF44" points="1299.5,1839.2688,1303.5,1843.2688,1299.5,1847.2688,1295.5,1843.2688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="1308.5" y="1847.8633">ServerMediaSession(UsageEnvironment&amp; env, char const* streamName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="1308.5" y="1862.8862">Boolean isSSM, char const* miscSDPLines);</text><polygon fill="#FFFF44" points="1299.5,1869.3147,1303.5,1873.3147,1299.5,1877.3147,1295.5,1873.3147" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="149" x="1308.5" y="1877.9092">virtual ~ServerMediaSession();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1296.5" y="1886.3376"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="1308.5" y="1892.9321">virtual Boolean isServerMediaSession() const;</text><!--class ServerMediaSubsession--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="799.1475" id="ServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.5;" width="524" x="2432" y="1198"/><ellipse cx="2622.25" cy="1214" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2620.8281,1219.3594 Q2618.9688,1219.3594 2617.875,1217.9688 Q2616.7813,1216.5781 2616.7813,1213.5938 Q2616.7813,1211.0625 2617.9453,1209.4063 Q2619.1094,1207.75 2621.0938,1207.75 Q2622.5625,1207.75 2623.0313,1207.875 Q2623.5,1208.0781 2623.5,1208.0781 Q2623.5,1208.0781 2623.5,1208.0078 Q2623.5,1207.9375 2624.1094,1207.0156 L2625.1563,1210.6719 L2623.8281,1211.0781 Q2623.3594,1209.5313 2622.6953,1208.8672 Q2622.0313,1208.2031 2620.9688,1208.2031 Q2620.5781,1208.2031 2619.8125,1209.7344 Q2619.0469,1211.2656 2619.0469,1213.5156 Q2619.0469,1215.9844 2619.7109,1217.375 Q2620.375,1218.7656 2620.9063,1218.7656 Q2621.9688,1218.7656 2622.7266,1218 Q2623.4844,1217.2344 2623.8281,1215.5781 L2625.1563,1216.1719 Q2624.8281,1217.5781 2623.9297,1218.4688 Q2623.0313,1219.3594 2620.8281,1219.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="135" x="2642.75" y="1219.5576">ServerMediaSubsession</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2433" x2="2955" y1="1230" y2="1230"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="2452" y="1246.606">netAddressBits clientAddress, // in</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="2452" y="1261.6289">Port const&amp; clientRTPPort, // in</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="2452" y="1276.6519">Port const&amp; clientRTCPPort, // in</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2452" y="1291.6748">netAddressBits&amp; destinationAddress, // in out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="159" x="2452" y="1306.6978">u_int8_t&amp; destinationTTL, // in out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2452" y="1321.7207">Boolean&amp; isMulticast, // out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="129" x="2452" y="1336.7437">Port&amp; serverRTPPort, // out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2452" y="1351.7666">Port&amp; serverRTCPPort, // out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="2452" y="1366.7896">void*&amp; streamToken // out</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2452" y="1381.8125">TaskFunc* rtcpRRHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2452" y="1396.8354">void* rtcpRRHandlerClientData,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="2452" y="1411.8584">unsigned short&amp; rtpSeqNum,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2452" y="1426.8813">unsigned&amp; rtpTimestamp,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="2452" y="1441.9043">ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,</text><polygon fill="none" points="2443,1448.3328,2447,1452.3328,2443,1456.3328,2439,1452.3328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="184" x="2452" y="1456.9272">ServerMediaSession* fParentSession;</text><polygon fill="none" points="2443,1463.3557,2447,1467.3557,2443,1471.3557,2439,1467.3557" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="196" x="2452" y="1471.9502">netAddressBits fServerAddressForSDP;</text><polygon fill="none" points="2443,1478.3787,2447,1482.3787,2443,1486.3787,2439,1482.3787" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="2452" y="1486.9731">portNumBits fPortNumForSDP;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2440" y="1495.4016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2452" y="1501.9961">friend class ServerMediaSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2440" y="1510.4246"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="215" x="2452" y="1517.019">friend class ServerMediaSubsessionIterator;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2440" y="1525.4475"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="2452" y="1532.042">ServerMediaSubsession* fNext;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2440" y="1540.4705"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2452" y="1547.0649">unsigned fTrackNumber;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2440" y="1555.4934"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="2452" y="1562.0879">char const* fTrackId;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2433" x2="2955" y1="1568.5049" y2="1568.5049"/><ellipse cx="2443" cy="1581.5164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="266" x="2452" y="1585.1108">unsigned trackNumber() const { return fTrackNumber; }</text><ellipse cx="2443" cy="1596.5393" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2452" y="1600.1338">char const* trackId();</text><ellipse cx="2443" cy="1611.5623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="164" x="2452" y="1615.1567">virtual char const* sdpLines() = 0;</text><ellipse cx="2443" cy="1626.5852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="305" x="2452" y="1630.1797">virtual void getStreamParameters(unsigned clientSessionId, // in</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2452" y="1645.2026">int tcpSocketNum, // in (-1 means use UDP, not TCP)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="2452" y="1660.2256">unsigned char rtpChannelId, // in (used if TCP)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="2452" y="1675.2485">unsigned char rtcpChannelId, // in (used if TCP)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="25" x="2452" y="1690.2715">) = 0;</text><ellipse cx="2443" cy="1701.7" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2452" y="1705.2944">virtual void startStream(unsigned clientSessionId, void* streamToken,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="283" x="2452" y="1720.3174">void* serverRequestAlternativeByteHandlerClientData) = 0;</text><ellipse cx="2443" cy="1731.7458" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="2452" y="1735.3403">virtual void pauseStream(unsigned clientSessionId, void* streamToken);</text><ellipse cx="2443" cy="1746.7688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="423" x="2452" y="1750.3633">virtual void seekStream(unsigned clientSessionId, void* streamToken, double&amp; seekNPT,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2452" y="1765.3862">double streamDuration, u_int64_t&amp; numBytes);</text><ellipse cx="2443" cy="1776.8147" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="2452" y="1780.4092">virtual void seekStream(unsigned clientSessionId, void* streamToken, char*&amp; absStart, char*&amp; absEnd);</text><ellipse cx="2443" cy="1791.8376" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="2452" y="1795.4321">virtual void nullSeekStream(unsigned clientSessionId, void* streamToken,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2452" y="1810.4551">double streamEndTime, u_int64_t&amp; numBytes);</text><ellipse cx="2443" cy="1821.8835" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="2452" y="1825.478">virtual void setStreamScale(unsigned clientSessionId, void* streamToken, float scale);</text><ellipse cx="2443" cy="1836.9065" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="2452" y="1840.501">virtual float getCurrentNPT(void* streamToken);</text><ellipse cx="2443" cy="1851.9294" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="2452" y="1855.5239">virtual FramedSource* getStreamSource(void* streamToken);</text><ellipse cx="2443" cy="1866.9524" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="2452" y="1870.5469">virtual void deleteStream(unsigned clientSessionId, void*&amp; streamToken);</text><ellipse cx="2443" cy="1881.9753" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="2452" y="1885.5698">virtual void testScaleFactor(float&amp; scale); // sets "scale" to the actual supported scale</text><ellipse cx="2443" cy="1896.9983" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2452" y="1900.5928">virtual float duration() const;</text><ellipse cx="2443" cy="1912.0212" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="406" x="2452" y="1915.6157">virtual void getAbsoluteTimeRange(char*&amp; absStartTime, char*&amp; absEndTime) const;</text><ellipse cx="2443" cy="1927.0442" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="2452" y="1930.6387">void setServerAddressAndPortForSDP(netAddressBits addressBits,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="2452" y="1945.6616">portNumBits portBits);</text><polygon fill="#FFFF44" points="2443,1952.0901,2447,1956.0901,2443,1960.0901,2439,1956.0901" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="2452" y="1960.6846">ServerMediaSubsession(UsageEnvironment&amp; env);</text><polygon fill="#FFFF44" points="2443,1967.113,2447,1971.113,2443,1975.113,2439,1971.113" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2452" y="1975.7075">virtual ~ServerMediaSubsession();</text><polygon fill="#FFFF44" points="2443,1982.136,2447,1986.136,2443,1990.136,2439,1986.136" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="168" x="2452" y="1990.7305">char const* rangeSDPLine() const;</text><!--class ServerMediaSubsessionIterator--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="138.1377" id="ServerMediaSubsessionIterator" style="stroke: #A80036; stroke-width: 1.5;" width="337" x="2525.5" y="218.5"/><ellipse cx="2603.25" cy="234.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2601.8281,239.8594 Q2599.9688,239.8594 2598.875,238.4688 Q2597.7813,237.0781 2597.7813,234.0938 Q2597.7813,231.5625 2598.9453,229.9063 Q2600.1094,228.25 2602.0938,228.25 Q2603.5625,228.25 2604.0313,228.375 Q2604.5,228.5781 2604.5,228.5781 Q2604.5,228.5781 2604.5,228.5078 Q2604.5,228.4375 2605.1094,227.5156 L2606.1563,231.1719 L2604.8281,231.5781 Q2604.3594,230.0313 2603.6953,229.3672 Q2603.0313,228.7031 2601.9688,228.7031 Q2601.5781,228.7031 2600.8125,230.2344 Q2600.0469,231.7656 2600.0469,234.0156 Q2600.0469,236.4844 2600.7109,237.875 Q2601.375,239.2656 2601.9063,239.2656 Q2602.9688,239.2656 2603.7266,238.5 Q2604.4844,237.7344 2604.8281,236.0781 L2606.1563,236.6719 Q2605.8281,238.0781 2604.9297,238.9688 Q2604.0313,239.8594 2601.8281,239.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="173" x="2623.75" y="240.0576">ServerMediaSubsessionIterator</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2526.5" x2="2861.5" y1="250.5" y2="250.5"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2533.5" y="260.5115"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="2545.5" y="267.106">ServerMediaSession&amp; fOurSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2533.5" y="275.5344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="2545.5" y="282.1289">ServerMediaSubsession* fNextPtr;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2526.5" x2="2861.5" y1="288.5459" y2="288.5459"/><ellipse cx="2536.5" cy="301.5574" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="311" x="2545.5" y="305.1519">ServerMediaSubsessionIterator(ServerMediaSession&amp; session);</text><ellipse cx="2536.5" cy="316.5803" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2545.5" y="320.1748">virtual ~ServerMediaSubsessionIterator();</text><ellipse cx="2536.5" cy="331.6033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="2545.5" y="335.1978">ServerMediaSubsession* next(); // NULL if none</text><ellipse cx="2536.5" cy="346.6262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="2545.5" y="350.2207">void reset();</text><!--class ProxyServerMediaSession--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="489.1284" id="ProxyServerMediaSession" style="stroke: #A80036; stroke-width: 1.5;" width="450" x="1385" y="2903.5"/><ellipse cx="1534.25" cy="2919.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1532.8281,2924.8594 Q1530.9688,2924.8594 1529.875,2923.4688 Q1528.7813,2922.0781 1528.7813,2919.0938 Q1528.7813,2916.5625 1529.9453,2914.9063 Q1531.1094,2913.25 1533.0938,2913.25 Q1534.5625,2913.25 1535.0313,2913.375 Q1535.5,2913.5781 1535.5,2913.5781 Q1535.5,2913.5781 1535.5,2913.5078 Q1535.5,2913.4375 1536.1094,2912.5156 L1537.1563,2916.1719 L1535.8281,2916.5781 Q1535.3594,2915.0313 1534.6953,2914.3672 Q1534.0313,2913.7031 1532.9688,2913.7031 Q1532.5781,2913.7031 1531.8125,2915.2344 Q1531.0469,2916.7656 1531.0469,2919.0156 Q1531.0469,2921.4844 1531.7109,2922.875 Q1532.375,2924.2656 1532.9063,2924.2656 Q1533.9688,2924.2656 1534.7266,2923.5 Q1535.4844,2922.7344 1535.8281,2921.0781 L1537.1563,2921.6719 Q1536.8281,2923.0781 1535.9297,2923.9688 Q1535.0313,2924.8594 1532.8281,2924.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="143" x="1554.75" y="2925.0576">ProxyServerMediaSession</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1386" x2="1834" y1="2935.5" y2="2935.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="144" x="1405" y="2952.106">RTSPServer* ourRTSPServer,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="1405" y="2967.1289">char const* inputStreamURL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="160" x="1405" y="2982.1519">char const* streamName = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="1405" y="2997.1748">char const* username = NULL, char const* password = NULL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="1405" y="3012.1978">portNumBits tunnelOverHTTPPortNum = 0,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="106" x="1405" y="3027.2207">int verbosityLevel = 0,</text><ellipse cx="1396" cy="3038.6492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="1405" y="3042.2437">char describeCompletedFlag;</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="264" x="1405" y="3057.2666">char const* inputStreamURL, char const* streamName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="225" x="1405" y="3072.2896">char const* username, char const* password,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="1405" y="3087.3125">portNumBits tunnelOverHTTPPortNum, int verbosityLevel,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="115" x="1405" y="3102.3354">int socketNumToServer,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="340" x="1405" y="3117.3584">createNewProxyRTSPClientFunc* ourCreateNewProxyRTSPClientFunc</text><polygon fill="none" points="1396,3123.7869,1400,3127.7869,1396,3131.7869,1392,3127.7869" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="1405" y="3132.3813">RTSPServer* fOurRTSPServer;</text><polygon fill="none" points="1396,3138.8098,1400,3142.8098,1396,3146.8098,1392,3142.8098" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1405" y="3147.4043">ProxyRTSPClient* fProxyRTSPClient;</text><polygon fill="none" points="1396,3153.8328,1400,3157.8328,1396,3161.8328,1392,3157.8328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="174" x="1405" y="3162.4272">MediaSession* fClientMediaSession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3170.8557"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="1405" y="3177.4502">friend class ProxyRTSPClient;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3185.8787"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="209" x="1405" y="3192.4731">friend class ProxyServerMediaSubsession;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3200.9016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="1405" y="3207.4961">int fVerbosityLevel;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3215.9246"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="1405" y="3222.519">class PresentationTimeSessionNormalizer* fPresentationTimeSessionNormalizer;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3230.9475"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="331" x="1405" y="3237.542">createNewProxyRTSPClientFunc* fCreateNewProxyRTSPClientFunc;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1386" x2="1834" y1="3243.959" y2="3243.959"/><ellipse cx="1396" cy="3256.9705" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="343" x="1405" y="3260.5649">static ProxyServerMediaSession* createNew(UsageEnvironment&amp; env,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="1405" y="3275.5879">int socketNumToServer = -1);</text><ellipse cx="1396" cy="3287.0164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="1405" y="3290.6108">virtual ~ProxyServerMediaSession();</text><ellipse cx="1396" cy="3302.0393" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="112" x="1405" y="3305.6338">char const* url() const;</text><ellipse cx="1396" cy="3317.0623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="424" x="1405" y="3320.6567">Boolean describeCompletedSuccessfully() const { return fClientMediaSession != NULL; }</text><polygon fill="#FFFF44" points="1396,3327.0852,1400,3331.0852,1396,3335.0852,1392,3331.0852" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="400" x="1405" y="3335.6797">ProxyServerMediaSession(UsageEnvironment&amp; env, RTSPServer* ourRTSPServer,</text><text fill="#000000" font-family="sans-serif" font-size="15" font-weight="bold" lengthAdjust="spacingAndGlyphs" textLength="295" x="1405" y="3355.2866">defaultCreateNewProxyRTSPClientFunc);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3364.594"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="1405" y="3371.1885">void continueAfterDESCRIBE(char const* sdpDescription);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1393" y="3379.6169"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="404" x="1405" y="3386.2114">void resetDESCRIBEState(); // undoes what was done by "contineAfterDESCRIBE()"</text><!--class FramedSource--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="558.7803" id="FramedSource" style="stroke: #A80036; stroke-width: 1.5;" width="419" x="3530.5" y="8"/><ellipse cx="3694.75" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3693.3281,29.3594 Q3691.4688,29.3594 3690.375,27.9688 Q3689.2813,26.5781 3689.2813,23.5938 Q3689.2813,21.0625 3690.4453,19.4063 Q3691.6094,17.75 3693.5938,17.75 Q3695.0625,17.75 3695.5313,17.875 Q3696,18.0781 3696,18.0781 Q3696,18.0781 3696,18.0078 Q3696,17.9375 3696.6094,17.0156 L3697.6563,20.6719 L3696.3281,21.0781 Q3695.8594,19.5313 3695.1953,18.8672 Q3694.5313,18.2031 3693.4688,18.2031 Q3693.0781,18.2031 3692.3125,19.7344 Q3691.5469,21.2656 3691.5469,23.5156 Q3691.5469,25.9844 3692.2109,27.375 Q3692.875,28.7656 3693.4063,28.7656 Q3694.4688,28.7656 3695.2266,28 Q3695.9844,27.2344 3696.3281,25.5781 L3697.6563,26.1719 Q3697.3281,27.5781 3696.4297,28.4688 Q3695.5313,29.3594 3693.3281,29.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="82" x="3715.25" y="29.5576">FramedSource</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3531.5" x2="3948.5" y1="40" y2="40"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3550.5" y="56.606">unsigned numTruncatedBytes,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3550.5" y="71.6289">struct timeval presentationTime,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="3550.5" y="86.6519">afterGettingFunc* afterGettingFunc,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="3550.5" y="101.6748">void* afterGettingClientData,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="3550.5" y="116.6978">onCloseFunc* onCloseFunc,</text><polygon fill="none" points="3541.5,123.1262,3545.5,127.1262,3541.5,131.1262,3537.5,127.1262" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="3550.5" y="131.7207">unsigned char* fTo;</text><polygon fill="none" points="3541.5,138.1492,3545.5,142.1492,3541.5,146.1492,3537.5,142.1492" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="3550.5" y="146.7437">unsigned fMaxSize;</text><polygon fill="none" points="3541.5,153.1721,3545.5,157.1721,3541.5,161.1721,3537.5,157.1721" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3550.5" y="161.7666">unsigned fFrameSize;</text><polygon fill="none" points="3541.5,168.1951,3545.5,172.1951,3541.5,176.1951,3537.5,172.1951" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="3550.5" y="176.7896">unsigned fNumTruncatedBytes;</text><polygon fill="none" points="3541.5,183.218,3545.5,187.218,3541.5,191.218,3537.5,187.218" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="3550.5" y="191.8125">struct timeval fPresentationTime;</text><polygon fill="none" points="3541.5,198.241,3545.5,202.241,3541.5,206.241,3537.5,202.241" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3550.5" y="206.8354">unsigned fDurationInMicroseconds;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="215.2639"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3550.5" y="221.8584">afterGettingFunc* fAfterGettingFunc;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="230.2869"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="3550.5" y="236.8813">void* fAfterGettingClientData;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="245.3098"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="142" x="3550.5" y="251.9043">onCloseFunc* fOnCloseFunc;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="260.3328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="3550.5" y="266.9272">void* fOnCloseClientData;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="275.3557"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="3550.5" y="281.9502">Boolean fIsCurrentlyAwaitingData;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3531.5" x2="3948.5" y1="288.3672" y2="288.3672"/><ellipse cx="3541.5" cy="301.3787" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="393" x="3550.5" y="304.9731">static Boolean lookupByName(UsageEnvironment&amp; env, char const* sourceName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="3550.5" y="319.9961">FramedSource*&amp; resultSource);</text><ellipse cx="3541.5" cy="331.4246" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="3550.5" y="335.019">typedef void(afterGettingFunc)(void* clientData, unsigned frameSize,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="169" x="3550.5" y="350.042">unsigned durationInMicroseconds);</text><ellipse cx="3541.5" cy="361.4705" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="216" x="3550.5" y="365.0649">typedef void(onCloseFunc)(void* clientData);</text><ellipse cx="3541.5" cy="376.4934" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="276" x="3550.5" y="380.0879">void getNextFrame(unsigned char* to, unsigned maxSize,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3550.5" y="395.1108">void* onCloseClientData);</text><ellipse cx="3541.5" cy="406.5393" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="3550.5" y="410.1338">static void handleClosure(void* clientData);</text><ellipse cx="3541.5" cy="421.5623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="3550.5" y="425.1567">void handleClosure();</text><ellipse cx="3541.5" cy="436.5852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3550.5" y="440.1797">void stopGettingFrames();</text><ellipse cx="3541.5" cy="451.6082" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="191" x="3550.5" y="455.2026">virtual unsigned maxFrameSize() const;</text><ellipse cx="3541.5" cy="466.6311" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="165" x="3550.5" y="470.2256">virtual void doGetNextFrame() = 0;</text><ellipse cx="3541.5" cy="481.6541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="3550.5" y="485.2485">Boolean isCurrentlyAwaitingData() const;</text><ellipse cx="3541.5" cy="496.677" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="232" x="3550.5" y="500.2715">static void afterGetting(FramedSource* source);</text><polygon fill="#FFFF44" points="3541.5,506.7,3545.5,510.7,3541.5,514.7,3537.5,510.7" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="3550.5" y="515.2944">FramedSource(UsageEnvironment&amp; env);</text><polygon fill="#FFFF44" points="3541.5,521.7229,3545.5,525.7229,3541.5,529.7229,3537.5,525.7229" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="120" x="3550.5" y="530.3174">virtual ~FramedSource();</text><polygon fill="#FFFF44" points="3541.5,536.7458,3545.5,540.7458,3541.5,544.7458,3537.5,540.7458" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3550.5" y="545.3403">virtual void doStopGettingFrames();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3538.5" y="553.7688"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="3550.5" y="560.3633">virtual Boolean isFramedSource() const;</text><!--class FramedFilter--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="183.2065" id="FramedFilter" style="stroke: #A80036; stroke-width: 1.5;" width="356" x="3562" y="1506"/><ellipse cx="3700.75" cy="1522" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3699.3281,1527.3594 Q3697.4688,1527.3594 3696.375,1525.9688 Q3695.2813,1524.5781 3695.2813,1521.5938 Q3695.2813,1519.0625 3696.4453,1517.4063 Q3697.6094,1515.75 3699.5938,1515.75 Q3701.0625,1515.75 3701.5313,1515.875 Q3702,1516.0781 3702,1516.0781 Q3702,1516.0781 3702,1516.0078 Q3702,1515.9375 3702.6094,1515.0156 L3703.6563,1518.6719 L3702.3281,1519.0781 Q3701.8594,1517.5313 3701.1953,1516.8672 Q3700.5313,1516.2031 3699.4688,1516.2031 Q3699.0781,1516.2031 3698.3125,1517.7344 Q3697.5469,1519.2656 3697.5469,1521.5156 Q3697.5469,1523.9844 3698.2109,1525.375 Q3698.875,1526.7656 3699.4063,1526.7656 Q3700.4688,1526.7656 3701.2266,1526 Q3701.9844,1525.2344 3702.3281,1523.5781 L3703.6563,1524.1719 Q3703.3281,1525.5781 3702.4297,1526.4688 Q3701.5313,1527.3594 3699.3281,1527.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="3721.25" y="1527.5576">FramedFilter</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3563" x2="3917" y1="1538" y2="1538"/><polygon fill="none" points="3573,1546.0115,3577,1550.0115,3573,1554.0115,3569,1550.0115" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="3582" y="1554.606">FramedSource* fInputSource;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3563" x2="3917" y1="1561.0229" y2="1561.0229"/><ellipse cx="3573" cy="1574.0344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="3582" y="1577.6289">FramedSource* inputSource() const;</text><ellipse cx="3573" cy="1589.0574" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="3582" y="1592.6519">void reassignInputSource(FramedSource* newInputSource);</text><ellipse cx="3573" cy="1604.0803" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="3582" y="1607.6748">void detachInputSource();</text><polygon fill="#FFFF44" points="3573,1614.1033,3577,1618.1033,3573,1622.1033,3569,1618.1033" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="3582" y="1622.6978">FramedFilter(UsageEnvironment&amp; env, FramedSource* inputSource);</text><polygon fill="#FFFF44" points="3573,1629.1262,3577,1633.1262,3573,1637.1262,3569,1633.1262" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3582" y="1637.7207">virtual ~FramedFilter();</text><polygon fill="#FFFF44" points="3573,1644.1492,3577,1648.1492,3573,1652.1492,3569,1648.1492" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="3582" y="1652.7437">virtual char const* MIMEtype() const;</text><polygon fill="#FFFF44" points="3573,1659.1721,3577,1663.1721,3573,1667.1721,3569,1663.1721" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="158" x="3582" y="1667.7666">virtual void getAttributes() const;</text><polygon fill="#FFFF44" points="3573,1674.1951,3577,1678.1951,3573,1682.1951,3569,1678.1951" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="170" x="3582" y="1682.7896">virtual void doStopGettingFrames();</text><!--class PresentationTimeSubsessionNormalizer--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="258.3213" id="PresentationTimeSubsessionNormalizer" style="stroke: #A80036; stroke-width: 1.5;" width="716" x="3382" y="3019"/><ellipse cx="3623.25" cy="3035" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3621.8281,3040.3594 Q3619.9688,3040.3594 3618.875,3038.9688 Q3617.7813,3037.5781 3617.7813,3034.5938 Q3617.7813,3032.0625 3618.9453,3030.4063 Q3620.1094,3028.75 3622.0938,3028.75 Q3623.5625,3028.75 3624.0313,3028.875 Q3624.5,3029.0781 3624.5,3029.0781 Q3624.5,3029.0781 3624.5,3029.0078 Q3624.5,3028.9375 3625.1094,3028.0156 L3626.1563,3031.6719 L3624.8281,3032.0781 Q3624.3594,3030.5313 3623.6953,3029.8672 Q3623.0313,3029.2031 3621.9688,3029.2031 Q3621.5781,3029.2031 3620.8125,3030.7344 Q3620.0469,3032.2656 3620.0469,3034.5156 Q3620.0469,3036.9844 3620.7109,3038.375 Q3621.375,3039.7656 3621.9063,3039.7656 Q3622.9688,3039.7656 3623.7266,3039 Q3624.4844,3038.2344 3624.8281,3036.5781 L3626.1563,3037.1719 Q3625.8281,3038.5781 3624.9297,3039.4688 Q3624.0313,3040.3594 3621.8281,3040.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="225" x="3643.75" y="3040.5576">PresentationTimeSubsessionNormalizer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3383" x2="4097" y1="3051" y2="3051"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3061.0115"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="3402" y="3067.606">friend class PresentationTimeSessionNormalizer;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3076.0344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="3402" y="3082.6289">PresentationTimeSessionNormalizer&amp; fParent;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3091.0574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="3402" y="3097.6519">RTPSource* fRTPSource;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3106.0803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3402" y="3112.6748">RTPSink* fRTPSink;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3121.1033"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="3402" y="3127.6978">char const* fCodecName;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3136.1262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="3402" y="3142.7207">PresentationTimeSubsessionNormalizer* fNext;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3383" x2="4097" y1="3149.1377" y2="3149.1377"/><ellipse cx="3393" cy="3162.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="167" x="3402" y="3165.7437">void setRTPSink(RTPSink* rtpSink);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3174.1721"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="667" x="3402" y="3180.7666">PresentationTimeSubsessionNormalizer(PresentationTimeSessionNormalizer&amp; parent, FramedSource* inputSource, RTPSource* rtpSource,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="3402" y="3195.7896">char const* codecName, PresentationTimeSubsessionNormalizer* next);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3204.218"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="239" x="3402" y="3210.8125">virtual ~PresentationTimeSubsessionNormalizer();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3219.241"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="472" x="3402" y="3225.8354">static void afterGettingFrame(void* clientData, unsigned frameSize, unsigned numTruncatedBytes,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="324" x="3402" y="3240.8584">struct timeval presentationTime, unsigned durationInMicroseconds);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3249.2869"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="690" x="3402" y="3255.8813">void afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes, struct timeval presentationTime, unsigned durationInMicroseconds);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3390" y="3264.3098"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="3402" y="3270.9043">virtual void doGetNextFrame();</text><!--class PresentationTimeSessionNormalizer--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="228.2754" id="PresentationTimeSessionNormalizer" style="stroke: #A80036; stroke-width: 1.5;" width="654" x="1743" y="1483.5"/><ellipse cx="1963.75" cy="1499.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M1962.3281,1504.8594 Q1960.4688,1504.8594 1959.375,1503.4688 Q1958.2813,1502.0781 1958.2813,1499.0938 Q1958.2813,1496.5625 1959.4453,1494.9063 Q1960.6094,1493.25 1962.5938,1493.25 Q1964.0625,1493.25 1964.5313,1493.375 Q1965,1493.5781 1965,1493.5781 Q1965,1493.5781 1965,1493.5078 Q1965,1493.4375 1965.6094,1492.5156 L1966.6563,1496.1719 L1965.3281,1496.5781 Q1964.8594,1495.0313 1964.1953,1494.3672 Q1963.5313,1493.7031 1962.4688,1493.7031 Q1962.0781,1493.7031 1961.3125,1495.2344 Q1960.5469,1496.7656 1960.5469,1499.0156 Q1960.5469,1501.4844 1961.2109,1502.875 Q1961.875,1504.2656 1962.4063,1504.2656 Q1963.4688,1504.2656 1964.2266,1503.5 Q1964.9844,1502.7344 1965.3281,1501.0781 L1966.6563,1501.6719 Q1966.3281,1503.0781 1965.4297,1503.9688 Q1964.5313,1504.8594 1962.3281,1504.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="204" x="1984.25" y="1505.0576">PresentationTimeSessionNormalizer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1744" x2="2396" y1="1515.5" y2="1515.5"/><ellipse cx="1754" cy="1528.5115" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="1763" y="1532.106">PresentationTimeSubsessionNormalizer*</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="0" x="1766" y="1547.1289"/><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1555.5574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="1763" y="1562.1519">friend class PresentationTimeSubsessionNormalizer;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1570.5803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="318" x="1763" y="1577.1748">PresentationTimeSubsessionNormalizer* fSubsessionNormalizers;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1585.6033"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="302" x="1763" y="1592.1978">PresentationTimeSubsessionNormalizer* fMasterSSNormalizer;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1600.6262"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="140" x="1763" y="1607.2207">struct timeval fPTAdjustment;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="1744" x2="2396" y1="1613.6377" y2="1613.6377"/><ellipse cx="1754" cy="1626.6492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="301" x="1763" y="1630.2437">PresentationTimeSessionNormalizer(UsageEnvironment&amp; env);</text><ellipse cx="1754" cy="1641.6721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="1763" y="1645.2666">virtual ~PresentationTimeSessionNormalizer();</text><ellipse cx="1754" cy="1656.6951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="628" x="1763" y="1660.2896">createNewPresentationTimeSubsessionNormalizer(FramedSource* inputSource, RTPSource* rtpSource, char const* codecName);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1668.718"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="418" x="1763" y="1675.3125">void normalizePresentationTime(PresentationTimeSubsessionNormalizer* ssNormalizer,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="246" x="1763" y="1690.3354">struct timeval&amp; toPT, struct timeval const&amp; fromPT);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="1751" y="1698.7639"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="520" x="1763" y="1705.3584">void removePresentationTimeSubsessionNormalizer(PresentationTimeSubsessionNormalizer* ssNormalizer);</text><!--class OnDemandServerMediaSubsession--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="1039.5146" id="OnDemandServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.5;" width="675" x="2671.5" y="2628"/><ellipse cx="2905.25" cy="2644" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2903.8281,2649.3594 Q2901.9688,2649.3594 2900.875,2647.9688 Q2899.7813,2646.5781 2899.7813,2643.5938 Q2899.7813,2641.0625 2900.9453,2639.4063 Q2902.1094,2637.75 2904.0938,2637.75 Q2905.5625,2637.75 2906.0313,2637.875 Q2906.5,2638.0781 2906.5,2638.0781 Q2906.5,2638.0781 2906.5,2638.0078 Q2906.5,2637.9375 2907.1094,2637.0156 L2908.1563,2640.6719 L2906.8281,2641.0781 Q2906.3594,2639.5313 2905.6953,2638.8672 Q2905.0313,2638.2031 2903.9688,2638.2031 Q2903.5781,2638.2031 2902.8125,2639.7344 Q2902.0469,2641.2656 2902.0469,2643.5156 Q2902.0469,2645.9844 2902.7109,2647.375 Q2903.375,2648.7656 2903.9063,2648.7656 Q2904.9688,2648.7656 2905.7266,2648 Q2906.4844,2647.2344 2906.8281,2645.5781 L2908.1563,2646.1719 Q2907.8281,2647.5781 2906.9297,2648.4688 Q2906.0313,2649.3594 2903.8281,2649.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="199" x="2925.75" y="2649.5576">OnDemandServerMediaSubsession</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2672.5" x2="3345.5" y1="2660" y2="2660"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="186" x="2691.5" y="2676.606">protected: // we're a virtual base class</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="163" x="2691.5" y="2691.6289">portNumBits initialPortNum = 6970,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2691.5" y="2706.6519">netAddressBits clientAddress,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2691.5" y="2721.6748">Port const&amp; clientRTPPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="132" x="2691.5" y="2736.6978">Port const&amp; clientRTCPPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2691.5" y="2751.7207">int tcpSocketNum,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="2691.5" y="2766.7437">unsigned char rtpChannelId,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="141" x="2691.5" y="2781.7666">unsigned char rtcpChannelId,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="182" x="2691.5" y="2796.7896">netAddressBits&amp; destinationAddress,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2691.5" y="2811.8125">u_int8_t&amp; destinationTTL,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2691.5" y="2826.8354">Boolean&amp; isMulticast,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="102" x="2691.5" y="2841.8584">Port&amp; serverRTPPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="109" x="2691.5" y="2856.8813">Port&amp; serverRTCPPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="127" x="2691.5" y="2871.9043">TaskFunc* rtcpRRHandler,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="2691.5" y="2886.9272">void* rtcpRRHandlerClientData,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="2691.5" y="2901.9502">unsigned short&amp; rtpSeqNum,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="2691.5" y="2916.9731">unsigned&amp; rtpTimestamp,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="2691.5" y="2931.9961">ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,</text><polygon fill="none" points="2682.5,2938.4246,2686.5,2942.4246,2682.5,2946.4246,2678.5,2942.4246" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="292" x="2691.5" y="2947.019">protected: // new virtual functions, defined by all subclasses</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2691.5" y="2962.042">unsigned char rtpPayloadTypeIfDynamic,</text><polygon fill="none" points="2682.5,2968.4705,2686.5,2972.4705,2682.5,2976.4705,2678.5,2972.4705" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="2691.5" y="2977.0649">char* fSDPLines;</text><polygon fill="none" points="2682.5,2983.4934,2686.5,2987.4934,2682.5,2991.4934,2678.5,2987.4934" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="320" x="2691.5" y="2992.0879">HashTable* fDestinationsHashTable; // indexed by client session id</text><polygon fill="none" points="2682.5,2998.5164,2686.5,3002.5164,2682.5,3006.5164,2678.5,3002.5164" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="2691.5" y="3007.1108">private:</text><polygon fill="none" points="2682.5,3013.5393,2686.5,3017.5393,2682.5,3021.5393,2678.5,3017.5393" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2691.5" y="3022.1338">Boolean fReuseFirstSource;</text><polygon fill="none" points="2682.5,3028.5623,2686.5,3032.5623,2682.5,3036.5623,2678.5,3032.5623" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="131" x="2691.5" y="3037.1567">portNumBits fInitialPortNum;</text><polygon fill="none" points="2682.5,3043.5852,2686.5,3047.5852,2682.5,3051.5852,2678.5,3047.5852" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="156" x="2691.5" y="3052.1797">Boolean fMultiplexRTCPWithRTP;</text><polygon fill="none" points="2682.5,3058.6082,2686.5,3062.6082,2682.5,3066.6082,2678.5,3062.6082" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="118" x="2691.5" y="3067.2026">void* fLastStreamToken;</text><polygon fill="none" points="2682.5,3073.6311,2686.5,3077.6311,2682.5,3081.6311,2678.5,3077.6311" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="147" x="2691.5" y="3082.2256">char fCNAME[100]; // for RTCP</text><polygon fill="none" points="2682.5,3088.6541,2686.5,3092.6541,2682.5,3096.6541,2678.5,3092.6541" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="201" x="2691.5" y="3097.2485">RTCPAppHandlerFunc* fAppHandlerTask;</text><polygon fill="none" points="2682.5,3103.677,2686.5,3107.677,2682.5,3111.677,2678.5,3107.677" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="2691.5" y="3112.2715">void* fAppHandlerClientData;</text><polygon fill="none" points="2682.5,3118.7,2686.5,3122.7,2682.5,3126.7,2678.5,3122.7" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="122" x="2691.5" y="3127.2944">friend class StreamState;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2672.5" x2="3345.5" y1="3133.7114" y2="3133.7114"/><polygon fill="#FFFF44" points="2682.5,3141.7229,2686.5,3145.7229,2682.5,3149.7229,2678.5,3145.7229" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="428" x="2691.5" y="3150.3174">OnDemandServerMediaSubsession(UsageEnvironment&amp; env, Boolean reuseFirstSource,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="194" x="2691.5" y="3165.3403">Boolean multiplexRTCPWithRTP = False);</text><polygon fill="#FFFF44" points="2682.5,3171.7688,2686.5,3175.7688,2682.5,3179.7688,2678.5,3175.7688" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="220" x="2691.5" y="3180.3633">virtual ~OnDemandServerMediaSubsession();</text><polygon fill="#FFFF44" points="2682.5,3186.7917,2686.5,3190.7917,2682.5,3194.7917,2678.5,3190.7917" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2691.5" y="3195.3862">virtual char const* sdpLines();</text><polygon fill="#FFFF44" points="2682.5,3201.8147,2686.5,3205.8147,2682.5,3209.8147,2678.5,3205.8147" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="2691.5" y="3210.4092">virtual void getStreamParameters(unsigned clientSessionId,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="103" x="2691.5" y="3225.4321">void*&amp; streamToken);</text><polygon fill="#FFFF44" points="2682.5,3231.8606,2686.5,3235.8606,2682.5,3239.8606,2678.5,3235.8606" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="332" x="2691.5" y="3240.4551">virtual void startStream(unsigned clientSessionId, void* streamToken,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="2691.5" y="3255.478">void* serverRequestAlternativeByteHandlerClientData);</text><polygon fill="#FFFF44" points="2682.5,3261.9065,2686.5,3265.9065,2682.5,3269.9065,2678.5,3265.9065" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="2691.5" y="3270.501">virtual void pauseStream(unsigned clientSessionId, void* streamToken);</text><polygon fill="#FFFF44" points="2682.5,3276.9294,2686.5,3280.9294,2682.5,3284.9294,2678.5,3280.9294" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="649" x="2691.5" y="3285.5239">virtual void seekStream(unsigned clientSessionId, void* streamToken, double&amp; seekNPT, double streamDuration, u_int64_t&amp; numBytes);</text><polygon fill="#FFFF44" points="2682.5,3291.9524,2686.5,3295.9524,2682.5,3299.9524,2678.5,3295.9524" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="498" x="2691.5" y="3300.5469">virtual void seekStream(unsigned clientSessionId, void* streamToken, char*&amp; absStart, char*&amp; absEnd);</text><polygon fill="#FFFF44" points="2682.5,3306.9753,2686.5,3310.9753,2682.5,3314.9753,2678.5,3310.9753" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="2691.5" y="3315.5698">virtual void nullSeekStream(unsigned clientSessionId, void* streamToken,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="223" x="2691.5" y="3330.5928">double streamEndTime, u_int64_t&amp; numBytes);</text><polygon fill="#FFFF44" points="2682.5,3337.0212,2686.5,3341.0212,2682.5,3345.0212,2678.5,3341.0212" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="412" x="2691.5" y="3345.6157">virtual void setStreamScale(unsigned clientSessionId, void* streamToken, float scale);</text><polygon fill="#FFFF44" points="2682.5,3352.0442,2686.5,3356.0442,2682.5,3360.0442,2678.5,3356.0442" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="226" x="2691.5" y="3360.6387">virtual float getCurrentNPT(void* streamToken);</text><polygon fill="#FFFF44" points="2682.5,3367.0671,2686.5,3371.0671,2682.5,3375.0671,2678.5,3371.0671" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="2691.5" y="3375.6616">virtual FramedSource* getStreamSource(void* streamToken);</text><polygon fill="#FFFF44" points="2682.5,3382.0901,2686.5,3386.0901,2682.5,3390.0901,2678.5,3386.0901" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="350" x="2691.5" y="3390.6846">virtual void deleteStream(unsigned clientSessionId, void*&amp; streamToken);</text><polygon fill="#FFFF44" points="2682.5,3397.113,2686.5,3401.113,2682.5,3405.113,2678.5,3401.113" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="252" x="2691.5" y="3405.7075">virtual char const* getAuxSDPLine(RTPSink* rtpSink,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2691.5" y="3420.7305">FramedSource* inputSource);</text><polygon fill="#FFFF44" points="2682.5,3427.1589,2686.5,3431.1589,2682.5,3435.1589,2678.5,3431.1589" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="606" x="2691.5" y="3435.7534">virtual void seekStreamSource(FramedSource* inputSource, double&amp; seekNPT, double streamDuration, u_int64_t&amp; numBytes);</text><polygon fill="#FFFF44" points="2682.5,3442.1819,2686.5,3446.1819,2682.5,3450.1819,2678.5,3446.1819" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="455" x="2691.5" y="3450.7764">virtual void seekStreamSource(FramedSource* inputSource, char*&amp; absStart, char*&amp; absEnd);</text><polygon fill="#FFFF44" points="2682.5,3457.2048,2686.5,3461.2048,2682.5,3465.2048,2678.5,3461.2048" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="2691.5" y="3465.7993">virtual void setStreamSourceScale(FramedSource* inputSource, float scale);</text><polygon fill="#FFFF44" points="2682.5,3472.2278,2686.5,3476.2278,2682.5,3480.2278,2678.5,3476.2278" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="548" x="2691.5" y="3480.8223">virtual void setStreamSourceDuration(FramedSource* inputSource, double streamDuration, u_int64_t&amp; numBytes);</text><polygon fill="#FFFF44" points="2682.5,3487.2507,2686.5,3491.2507,2682.5,3495.2507,2678.5,3491.2507" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="2691.5" y="3495.8452">virtual void closeStreamSource(FramedSource* inputSource);</text><polygon fill="#FFFF44" points="2682.5,3502.2737,2686.5,3506.2737,2682.5,3510.2737,2678.5,3506.2737" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="2691.5" y="3510.8682">virtual FramedSource* createNewStreamSource(unsigned clientSessionId,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="2691.5" y="3525.8911">unsigned&amp; estBitrate) = 0;</text><polygon fill="#FFFF44" points="2682.5,3532.3196,2686.5,3536.3196,2682.5,3540.3196,2678.5,3536.3196" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="2691.5" y="3540.9141">virtual RTPSink* createNewRTPSink(Groupsock* rtpGroupsock,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="161" x="2691.5" y="3555.937">FramedSource* inputSource) = 0;</text><polygon fill="#FFFF44" points="2682.5,3562.3655,2686.5,3566.3655,2682.5,3570.3655,2678.5,3566.3655" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="363" x="2691.5" y="3570.96">virtual Groupsock* createGroupsock(struct in_addr const&amp; addr, Port port);</text><ellipse cx="2682.5" cy="3582.3884" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="2691.5" y="3585.9829">void multiplexRTCPWithRTP() { fMultiplexRTCPWithRTP = True; }</text><ellipse cx="2682.5" cy="3597.4114" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="394" x="2691.5" y="3601.0059">void setRTCPAppPacketHandler(RTCPAppHandlerFunc* handler, void* clientData);</text><ellipse cx="2682.5" cy="3612.4343" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="2691.5" y="3616.0288">void sendRTCPAppPacket(u_int8_t subtype, char const* name,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="2691.5" y="3631.0518">u_int8_t* appDependentData, unsigned appDependentDataSize);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2679.5" y="3639.4802"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="375" x="2691.5" y="3646.0747">void setSDPLinesFromRTPSink(RTPSink* rtpSink, FramedSource* inputSource,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="100" x="2691.5" y="3661.0977">unsigned estBitrate);</text><!--class Destinations--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="198.2295" id="Destinations" style="stroke: #A80036; stroke-width: 1.5;" width="424" x="2975" y="188.5"/><ellipse cx="3147.75" cy="204.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3146.3281,209.8594 Q3144.4688,209.8594 3143.375,208.4688 Q3142.2813,207.0781 3142.2813,204.0938 Q3142.2813,201.5625 3143.4453,199.9063 Q3144.6094,198.25 3146.5938,198.25 Q3148.0625,198.25 3148.5313,198.375 Q3149,198.5781 3149,198.5781 Q3149,198.5781 3149,198.5078 Q3149,198.4375 3149.6094,197.5156 L3150.6563,201.1719 L3149.3281,201.5781 Q3148.8594,200.0313 3148.1953,199.3672 Q3147.5313,198.7031 3146.4688,198.7031 Q3146.0781,198.7031 3145.3125,200.2344 Q3144.5469,201.7656 3144.5469,204.0156 Q3144.5469,206.4844 3145.2109,207.875 Q3145.875,209.2656 3146.4063,209.2656 Q3147.4688,209.2656 3148.2266,208.5 Q3148.9844,207.7344 3149.3281,206.0781 L3150.6563,206.6719 Q3150.3281,208.0781 3149.4297,208.9688 Q3148.5313,209.8594 3146.3281,209.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="70" x="3168.25" y="210.0576">Destinations</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2976" x2="3398" y1="220.5" y2="220.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="2995" y="237.106">Port const&amp; rtpDestPort,</text><ellipse cx="2986" cy="248.5344" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="72" x="2995" y="252.1289">Boolean isTCP;</text><ellipse cx="2986" cy="263.5574" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="95" x="2995" y="267.1519">struct in_addr addr;</text><ellipse cx="2986" cy="278.5803" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="57" x="2995" y="282.1748">Port rtpPort;</text><ellipse cx="2986" cy="293.6033" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="63" x="2995" y="297.1978">Port rtcpPort;</text><ellipse cx="2986" cy="308.6262" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="86" x="2995" y="312.2207">int tcpSocketNum;</text><ellipse cx="2986" cy="323.6492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="2995" y="327.2437">unsigned char rtpChannelId, rtcpChannelId;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2976" x2="3398" y1="333.6606" y2="333.6606"/><ellipse cx="2986" cy="346.6721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="218" x="2995" y="350.2666">Destinations(struct in_addr const&amp; destAddr,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="2995" y="365.2896">Port const&amp; rtcpDestPort);</text><ellipse cx="2986" cy="376.718" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="398" x="2995" y="380.3125">Destinations(int tcpSockNum, unsigned char rtpChanId, unsigned char rtcpChanId);</text><!--class StreamState--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="588.8262" id="StreamState" style="stroke: #A80036; stroke-width: 1.5;" width="403" x="3062.5" y="1303"/><ellipse cx="3225.75" cy="1319" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M3224.3281,1324.3594 Q3222.4688,1324.3594 3221.375,1322.9688 Q3220.2813,1321.5781 3220.2813,1318.5938 Q3220.2813,1316.0625 3221.4453,1314.4063 Q3222.6094,1312.75 3224.5938,1312.75 Q3226.0625,1312.75 3226.5313,1312.875 Q3227,1313.0781 3227,1313.0781 Q3227,1313.0781 3227,1313.0078 Q3227,1312.9375 3227.6094,1312.0156 L3228.6563,1315.6719 L3227.3281,1316.0781 Q3226.8594,1314.5313 3226.1953,1313.8672 Q3225.5313,1313.2031 3224.4688,1313.2031 Q3224.0781,1313.2031 3223.3125,1314.7344 Q3222.5469,1316.2656 3222.5469,1318.5156 Q3222.5469,1320.9844 3223.2109,1322.375 Q3223.875,1323.7656 3224.4063,1323.7656 Q3225.4688,1323.7656 3226.2266,1323 Q3226.9844,1322.2344 3227.3281,1320.5781 L3228.6563,1321.1719 Q3228.3281,1322.5781 3227.4297,1323.4688 Q3226.5313,1324.3594 3224.3281,1324.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="68" x="3246.25" y="1324.5576">StreamState</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3063.5" x2="3464.5" y1="1335" y2="1335"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="274" x="3082.5" y="1351.606">Port const&amp; serverRTPPort, Port const&amp; serverRTCPPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="200" x="3082.5" y="1366.6289">RTPSink* rtpSink, BasicUDPSink* udpSink,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="234" x="3082.5" y="1381.6519">unsigned totalBW, FramedSource* mediaSource,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="278" x="3082.5" y="1396.6748">TaskFunc* rtcpRRHandler, void* rtcpRRHandlerClientData,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="377" x="3082.5" y="1411.6978">ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,</text><ellipse cx="3073.5" cy="1423.1262" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="36" x="3082.5" y="1426.7207">private:</text><ellipse cx="3073.5" cy="1438.1492" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="221" x="3082.5" y="1441.7437">OnDemandServerMediaSubsession&amp; fMaster;</text><ellipse cx="3073.5" cy="1453.1721" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="145" x="3082.5" y="1456.7666">Boolean fAreCurrentlyPlaying;</text><ellipse cx="3073.5" cy="1468.1951" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="133" x="3082.5" y="1471.7896">unsigned fReferenceCount;</text><ellipse cx="3073.5" cy="1483.218" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="188" x="3082.5" y="1486.8125">Port fServerRTPPort, fServerRTCPPort;</text><ellipse cx="3073.5" cy="1498.241" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="3082.5" y="1501.8354">RTPSink* fRTPSink;</text><ellipse cx="3073.5" cy="1513.2639" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="3082.5" y="1516.8584">BasicUDPSink* fUDPSink;</text><ellipse cx="3073.5" cy="1528.2869" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3082.5" y="1531.8813">float fStreamDuration;</text><ellipse cx="3073.5" cy="1543.3098" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3082.5" y="1546.9043">unsigned fTotalBW;</text><ellipse cx="3073.5" cy="1558.3328" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3082.5" y="1561.9272">RTCPInstance* fRTCPInstance;</text><ellipse cx="3073.5" cy="1573.3557" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="3082.5" y="1576.9502">FramedSource* fMediaSource;</text><ellipse cx="3073.5" cy="1588.3787" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="73" x="3082.5" y="1591.9731">float fStartNPT;</text><ellipse cx="3073.5" cy="1603.4016" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="98" x="3082.5" y="1606.9961">Groupsock* fRTPgs;</text><ellipse cx="3073.5" cy="1618.4246" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="105" x="3082.5" y="1622.019">Groupsock* fRTCPgs;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3063.5" x2="3464.5" y1="1628.436" y2="1628.436"/><ellipse cx="3073.5" cy="1641.4475" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="280" x="3082.5" y="1645.042">StreamState(OnDemandServerMediaSubsession&amp; master,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="3082.5" y="1660.0649">Groupsock* rtpGS, Groupsock* rtcpGS);</text><ellipse cx="3073.5" cy="1671.4934" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="108" x="3082.5" y="1675.0879">virtual ~StreamState();</text><ellipse cx="3073.5" cy="1686.5164" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3082.5" y="1690.1108">void startPlaying(Destinations* destinations,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="3082.5" y="1705.1338">void* serverRequestAlternativeByteHandlerClientData);</text><ellipse cx="3073.5" cy="1716.5623" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="64" x="3082.5" y="1720.1567">void pause();</text><ellipse cx="3073.5" cy="1731.5852" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="303" x="3082.5" y="1735.1797">void sendRTCPAppPacket(u_int8_t subtype, char const* name,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="3082.5" y="1750.2026">u_int8_t* appDependentData, unsigned appDependentDataSize);</text><ellipse cx="3073.5" cy="1761.6311" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="210" x="3082.5" y="1765.2256">void endPlaying(Destinations* destinations);</text><ellipse cx="3073.5" cy="1776.6541" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="68" x="3082.5" y="1780.2485">void reclaim();</text><ellipse cx="3073.5" cy="1791.677" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="273" x="3082.5" y="1795.2715">unsigned&amp; referenceCount() { return fReferenceCount; }</text><ellipse cx="3073.5" cy="1806.7" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="294" x="3082.5" y="1810.2944">Port const&amp; serverRTPPort() const { return fServerRTPPort; }</text><ellipse cx="3073.5" cy="1821.7229" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="308" x="3082.5" y="1825.3174">Port const&amp; serverRTCPPort() const { return fServerRTCPPort; }</text><ellipse cx="3073.5" cy="1836.7458" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="3082.5" y="1840.3403">RTPSink* rtpSink() const { return fRTPSink; }</text><ellipse cx="3073.5" cy="1851.7688" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="265" x="3082.5" y="1855.3633">float streamDuration() const { return fStreamDuration; }</text><ellipse cx="3073.5" cy="1866.7917" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="298" x="3082.5" y="1870.3862">FramedSource* mediaSource() const { return fMediaSource; }</text><ellipse cx="3073.5" cy="1881.8147" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="178" x="3082.5" y="1885.4092">float&amp; startNPT() { return fStartNPT; }</text><!--class ProxyServerMediaSubsession--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="318.4131" id="ProxyServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.5;" width="667" x="2675.5" y="3728"/><ellipse cx="2922.75" cy="3744" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M2921.3281,3749.3594 Q2919.4688,3749.3594 2918.375,3747.9688 Q2917.2813,3746.5781 2917.2813,3743.5938 Q2917.2813,3741.0625 2918.4453,3739.4063 Q2919.6094,3737.75 2921.5938,3737.75 Q2923.0625,3737.75 2923.5313,3737.875 Q2924,3738.0781 2924,3738.0781 Q2924,3738.0781 2924,3738.0078 Q2924,3737.9375 2924.6094,3737.0156 L2925.6563,3740.6719 L2924.3281,3741.0781 Q2923.8594,3739.5313 2923.1953,3738.8672 Q2922.5313,3738.2031 2921.4688,3738.2031 Q2921.0781,3738.2031 2920.3125,3739.7344 Q2919.5469,3741.2656 2919.5469,3743.5156 Q2919.5469,3745.9844 2920.2109,3747.375 Q2920.875,3748.7656 2921.4063,3748.7656 Q2922.4688,3748.7656 2923.2266,3748 Q2923.9844,3747.2344 2924.3281,3745.5781 L2925.6563,3746.1719 Q2925.3281,3747.5781 2924.4297,3748.4688 Q2923.5313,3749.3594 2921.3281,3749.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="164" x="2943.25" y="3749.5576">ProxyServerMediaSubsession</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2676.5" x2="3341.5" y1="3760" y2="3760"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="197" x="2695.5" y="3776.606">unsigned char rtpPayloadTypeIfDynamic,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="3785.0344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2695.5" y="3791.6289">friend class ProxyRTSPClient;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="3800.0574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="641" x="2695.5" y="3806.6519">MediaSubsession&amp; fClientMediaSubsession; // the 'client' media subsession object that corresponds to this 'server' media subsession</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="3815.0803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="357" x="2695.5" y="3821.6748">ProxyServerMediaSubsession* fNext; // used when we're part of a queue</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="3830.1033"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="136" x="2695.5" y="3836.6978">Boolean fHaveSetupStream;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="2676.5" x2="3341.5" y1="3843.1147" y2="3843.1147"/><ellipse cx="2686.5" cy="3856.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="337" x="2695.5" y="3859.7207">ProxyServerMediaSubsession(MediaSubsession&amp; mediaSubsession);</text><ellipse cx="2686.5" cy="3871.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="2695.5" y="3874.7437">virtual ~ProxyServerMediaSubsession();</text><ellipse cx="2686.5" cy="3886.1721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="389" x="2695.5" y="3889.7666">char const* codecName() const { return fClientMediaSubsession.codecName(); }</text><ellipse cx="2686.5" cy="3901.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="2695.5" y="3904.7896">char const* mediumName() const { return fClientMediaSubsession.mediumName(); }</text><ellipse cx="2686.5" cy="3916.218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="456" x="2695.5" y="3919.8125">unsigned char rtpPayloadFormat() const { return fClientMediaSubsession.rtpPayloadFormat(); }</text><ellipse cx="2686.5" cy="3931.241" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="359" x="2695.5" y="3934.8354">virtual FramedSource* createNewStreamSource(unsigned clientSessionId,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="107" x="2695.5" y="3949.8584">unsigned&amp; estBitrate);</text><ellipse cx="2686.5" cy="3961.2869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="2695.5" y="3964.8813">virtual void closeStreamSource(FramedSource* inputSource);</text><ellipse cx="2686.5" cy="3976.3098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="304" x="2695.5" y="3979.9043">virtual RTPSink* createNewRTPSink(Groupsock* rtpGroupsock,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="143" x="2695.5" y="3994.9272">FramedSource* inputSource);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="4003.3557"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="2695.5" y="4009.9502">static void subsessionByeHandler(void* clientData);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="4018.3787"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="2695.5" y="4024.9731">void subsessionByeHandler();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="2683.5" y="4033.4016"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="484" x="2695.5" y="4039.9961">int verbosityLevel() const { return ((ProxyServerMediaSession*)fParentSession)-&gt;fVerbosityLevel; }</text><!--class HandlerServerForREGISTERCommand--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="288.3672" id="HandlerServerForREGISTERCommand" style="stroke: #A80036; stroke-width: 1.5;" width="669" x="3953.5" y="1453.5"/><ellipse cx="4175.25" cy="1469.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4173.8281,1474.8594 Q4171.9688,1474.8594 4170.875,1473.4688 Q4169.7813,1472.0781 4169.7813,1469.0938 Q4169.7813,1466.5625 4170.9453,1464.9063 Q4172.1094,1463.25 4174.0938,1463.25 Q4175.5625,1463.25 4176.0313,1463.375 Q4176.5,1463.5781 4176.5,1463.5781 Q4176.5,1463.5781 4176.5,1463.5078 Q4176.5,1463.4375 4177.1094,1462.5156 L4178.1563,1466.1719 L4176.8281,1466.5781 Q4176.3594,1465.0313 4175.6953,1464.3672 Q4175.0313,1463.7031 4173.9688,1463.7031 Q4173.5781,1463.7031 4172.8125,1465.2344 Q4172.0469,1466.7656 4172.0469,1469.0156 Q4172.0469,1471.4844 4172.7109,1472.875 Q4173.375,1474.2656 4173.9063,1474.2656 Q4174.9688,1474.2656 4175.7266,1473.5 Q4176.4844,1472.7344 4176.8281,1471.0781 L4178.1563,1471.6719 Q4177.8281,1473.0781 4176.9297,1473.9688 Q4176.0313,1474.8594 4173.8281,1474.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="217" x="4195.75" y="1475.0576">HandlerServerForREGISTERCommand</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3954.5" x2="4621.5" y1="1485.5" y2="1485.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="334" x="3973.5" y="1502.106">Port ourPort = 0, UserAuthenticationDatabase* authDatabase = NULL,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3961.5" y="1510.5344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="206" x="3973.5" y="1517.1289">onRTSPClientCreationFunc* fCreationFunc;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3961.5" y="1525.5574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="94" x="3973.5" y="1532.1519">int fVerbosityLevel;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="3961.5" y="1540.5803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="3973.5" y="1547.1748">char* fApplicationName;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="3954.5" x2="4621.5" y1="1553.5918" y2="1553.5918"/><ellipse cx="3964.5" cy="1566.6033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="601" x="3973.5" y="1570.1978">static HandlerServerForREGISTERCommand* createNew(UsageEnvironment&amp; env, onRTSPClientCreationFunc* creationFunc,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="3973.5" y="1585.2207">int verbosityLevel = 0, char const* applicationName = NULL);</text><ellipse cx="3964.5" cy="1596.6492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="345" x="3973.5" y="1600.2437">portNumBits serverPortNum() const { return ntohs(fServerPort.num()); }</text><polygon fill="#FFFF44" points="3964.5,1606.6721,3968.5,1610.6721,3964.5,1614.6721,3960.5,1610.6721" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="643" x="3973.5" y="1615.2666">HandlerServerForREGISTERCommand(UsageEnvironment&amp; env, onRTSPClientCreationFunc* creationFunc, int ourSocket, Port ourPort,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="453" x="3973.5" y="1630.2896">UserAuthenticationDatabase* authDatabase, int verbosityLevel, char const* applicationName);</text><polygon fill="#FFFF44" points="3964.5,1636.718,3968.5,1640.718,3964.5,1644.718,3960.5,1640.718" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="3973.5" y="1645.3125">virtual ~HandlerServerForREGISTERCommand();</text><polygon fill="#FFFF44" points="3964.5,1651.741,3968.5,1655.741,3964.5,1659.741,3960.5,1655.741" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="536" x="3973.5" y="1660.3354">virtual RTSPClient* createNewRTSPClient(char const* rtspURL, int verbosityLevel, char const* applicationName,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="119" x="3973.5" y="1675.3584">int socketNumToServer);</text><polygon fill="#FFFF44" points="3964.5,1681.7869,3968.5,1685.7869,3964.5,1689.7869,3960.5,1685.7869" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="447" x="3973.5" y="1690.3813">virtual char const* allowedCommandNames(); // we support "OPTIONS" and "REGISTER" only</text><polygon fill="#FFFF44" points="3964.5,1696.8098,3968.5,1700.8098,3964.5,1704.8098,3960.5,1700.8098" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="562" x="3973.5" y="1705.4043">virtual Boolean weImplementREGISTER(char const* proxyURLSuffix, char*&amp; responseStr); // redefined to return True</text><polygon fill="#FFFF44" points="3964.5,1711.8328,3968.5,1715.8328,3964.5,1719.8328,3960.5,1715.8328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="495" x="3973.5" y="1720.4272">virtual void implementCmd_REGISTER(char const* url, char const* urlSuffix, int socketToRemoteServer,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="258" x="3973.5" y="1735.4502">Boolean deliverViaTCP, char const* proxyURLSuffix);</text><!--class RTSPServer--><rect fill="#FEFECE" filter="url(#fu4iza8y9bfla)" height="48" id="RTSPServer" style="stroke: #A80036; stroke-width: 1.5;" width="99" x="4238.5" y="263.5"/><ellipse cx="4253.5" cy="279.5" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M4252.0781,284.8594 Q4250.2188,284.8594 4249.125,283.4688 Q4248.0313,282.0781 4248.0313,279.0938 Q4248.0313,276.5625 4249.1953,274.9063 Q4250.3594,273.25 4252.3438,273.25 Q4253.8125,273.25 4254.2813,273.375 Q4254.75,273.5781 4254.75,273.5781 Q4254.75,273.5781 4254.75,273.5078 Q4254.75,273.4375 4255.3594,272.5156 L4256.4063,276.1719 L4255.0781,276.5781 Q4254.6094,275.0313 4253.9453,274.3672 Q4253.2813,273.7031 4252.2188,273.7031 Q4251.8281,273.7031 4251.0625,275.2344 Q4250.2969,276.7656 4250.2969,279.0156 Q4250.2969,281.4844 4250.9609,282.875 Q4251.625,284.2656 4252.1563,284.2656 Q4253.2188,284.2656 4253.9766,283.5 Q4254.7344,282.7344 4255.0781,281.0781 L4256.4063,281.6719 Q4256.0781,283.0781 4255.1797,283.9688 Q4254.2813,284.8594 4252.0781,284.8594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="67" x="4267.5" y="285.0576">RTSPServer</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="4239.5" x2="4336.5" y1="295.5" y2="295.5"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="4239.5" x2="4336.5" y1="303.5" y2="303.5"/><!--link Medium to RTSPClient--><path d="M1494.82,447.96 C1416.85,498.96 1336.14,559.83 1271,627 C1183.4,717.32 1102.4,822.63 1030.14,929.9 " fill="none" id="Medium-RTSPClient" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="1491.33,441.87,1511.93,436.89,1498.94,453.63,1491.33,441.87" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RTSPClient to RequestQueue--><path d="M311.669,2566.18 C304.649,2586.95 297.751,2607.57 291,2628 C242.998,2773.23 194.906,2943.93 166.3,3048.783 " fill="none" id="RTSPClient-RequestQueue" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="315.934,2553.59,310.2203,2557.9892,312.0835,2564.9555,317.7973,2560.5562,315.934,2553.59" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RTSPClient to RequestRecord--><path d="M602.55,2581.31 C594.433,2694.54 586.778,2801.34 580.351,2891 " fill="none" id="RTSPClient-RequestRecord" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="603.49,2568.19,599.0717,2573.889,602.6329,2580.1594,607.0512,2574.4604,603.49,2568.19" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RTSPClient to ProxyRTSPClient--><path d="M945.805,2587.82 C980.829,2714.83 1013.54,2833.46 1039.74,2928.47 " fill="none" id="RTSPClient-ProxyRTSPClient" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="938.962,2589.33,940.394,2568.19,952.459,2585.61,938.962,2589.33" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Medium to ServerMediaSession--><path d="M1741.87,481.2 C1694.98,695.62 1618.63,1044.82 1563.84,1295.38 " fill="none" id="Medium-ServerMediaSession" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="1735.06,479.56,1746.17,461.52,1748.74,482.55,1735.06,479.56" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Medium to ServerMediaSubsession--><path d="M2074.81,386.63 C2195.11,440.51 2326.62,518.82 2414,627 C2544.52,788.58 2614.2,1008.45 2651.4,1197.95 " fill="none" id="Medium-ServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="2071.87,392.99,2056.38,378.53,2077.5,380.17,2071.87,392.99" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ServerMediaSubsessionIterator to ServerMediaSubsession--><path d="M2694,361.58 C2694,519.05 2694,900.22 2694,1197.77 " fill="none" id="ServerMediaSubsessionIterator-ServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="2694,356.53,2690,365.53,2694,361.53,2698,365.53,2694,356.53" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ServerMediaSession to ProxyServerMediaSession--><path d="M1521.24,1919.77 C1542.4,2212.34 1573.19,2638.02 1592.38,2903.4 " fill="none" id="ServerMediaSession-ProxyServerMediaSession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1514.26,1920.27,1519.79,1899.82,1528.22,1919.26,1514.26,1920.27" style="stroke: #A80036; stroke-width: 1.0;"/><!--link FramedSource to FramedFilter--><path d="M3740,587.28 C3740,883.38 3740,1318.94 3740,1505.86 " fill="none" id="FramedSource-FramedFilter" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="3733,587.09,3740,567.09,3747,587.09,3733,587.09" style="stroke: #A80036; stroke-width: 1.0;"/><!--link FramedFilter to PresentationTimeSubsessionNormalizer--><path d="M3740,1709.13 C3740,1988.53 3740,2721.52 3740,3018.89 " fill="none" id="FramedFilter-PresentationTimeSubsessionNormalizer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3733,1709.02,3740,1689.02,3747,1709.02,3733,1709.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Medium to PresentationTimeSessionNormalizer--><path d="M1826.19,481.46 C1886.71,758.24 1996.25,1259.23 2045.2,1483.1 " fill="none" id="Medium-PresentationTimeSessionNormalizer" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="1819.26,482.55,1821.83,461.52,1832.94,479.56,1819.26,482.55" style="stroke: #A80036; stroke-width: 1.0;"/><!--link ServerMediaSubsession to OnDemandServerMediaSubsession--><path d="M2779.1,2016.86 C2817.38,2205.01 2862.94,2429 2903.37,2627.75 " fill="none" id="ServerMediaSubsession-OnDemandServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="2772.2,2018.02,2775.07,1997.03,2785.92,2015.23,2772.2,2018.02" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Destinations to OnDemandServerMediaSubsession--><path d="M3131.66,391.38 C3099.58,456.8 3062.23,544.45 3045,627 C2968.22,994.88 2978.27,2003.73 2993.2,2627.69 " fill="none" id="Destinations-OnDemandServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3133.96,386.7,3126.4056,393.0191,3131.7583,391.1892,3133.5883,396.5418,3133.96,386.7" style="stroke: #A80036; stroke-width: 1.0;"/><!--link Destinations to StreamState--><path d="M3193.07,391.66 C3204.52,586.09 3229.66,1013.21 3246.72,1303 " fill="none" id="Destinations-StreamState" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3192.77,386.54,3189.3178,395.764,3193.0703,391.531,3197.3033,395.2835,3192.77,386.54" style="stroke: #A80036; stroke-width: 1.0;"/><!--link StreamState to OnDemandServerMediaSubsession--><path d="M3214.81,1897.22 C3180.75,2104.04 3134.53,2384.74 3094.51,2627.73 " fill="none" id="StreamState-OnDemandServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="3215.66,1892.04,3210.2503,1900.2701,3214.8473,1896.9735,3218.1439,1901.5705,3215.66,1892.04" style="stroke: #A80036; stroke-width: 1.0;"/><!--link OnDemandServerMediaSubsession to ProxyServerMediaSubsession--><path d="M3009,3688.428 C3009,3701.937 3009,3715.053 3009,3727.674 " fill="none" id="OnDemandServerMediaSubsession-ProxyServerMediaSubsession" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="3002,3688.365,3009,3668.365,3016,3688.365,3002,3688.365" style="stroke: #A80036; stroke-width: 1.0;"/><!--link RTSPServer to HandlerServerForREGISTERCommand--><path d="M4288,331.84 C4288,506.17 4288,1160.78 4288,1453.5 " fill="none" id="RTSPServer-HandlerServerForREGISTERCommand" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="none" points="4281,331.76,4288,311.76,4295,331.76,4281,331.76" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml


class Medium {
    + static Boolean lookupByName(UsageEnvironment& env, char const* mediumName, Medium*& resultMedium);
    + static void close(UsageEnvironment& env, char const* mediumName);
    + static void close(Medium* medium); // alternative close() method using ptrs
    + UsageEnvironment& envir() const { return fEnviron; }
    + char const* name() const { return fMediumName; }
    + virtual Boolean isSource() const;
    + virtual Boolean isSink() const;
    + virtual Boolean isRTCPInstance() const;
    + virtual Boolean isRTSPClient() const;
    + virtual Boolean isRTSPServer() const;
    + virtual Boolean isMediaSession() const;
    + virtual Boolean isServerMediaSession() const;
    + virtual Boolean isDarwinInjector() const;
    # friend class MediaLookupTable;
    # Medium(UsageEnvironment& env);
    # virtual ~Medium();
    # TaskToken& nextTask();
    - UsageEnvironment& fEnviron;
    - char fMediumName[mediumNameMaxLen];
    - TaskToken fNextTask;
}


class RTSPClient {
    + static RTSPClient* createNew(UsageEnvironment& env, char const* rtspURL,
          int verbosityLevel = 0,
          char const* applicationName = NULL,
          portNumBits tunnelOverHTTPPortNum = 0,
          int socketNumToServer = -1);
    + typedef void(responseHandler)(RTSPClient* rtspClient,
          int resultCode, char* resultString);
    + unsigned sendDescribeCommand(responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendOptionsCommand(responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendAnnounceCommand(char const* sdpDescription, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendSetupCommand(MediaSubsession& subsession, responseHandler* responseHandler,
          Boolean streamOutgoing = False,
          Boolean streamUsingTCP = False,
          Boolean forceMulticastOnUnspecified = False,
          Authenticator* authenticator = NULL);
    + unsigned sendPlayCommand(MediaSession& session, responseHandler* responseHandler,
    +     double start = 0.0f, double end = -1.0f, float scale = 1.0f,
    +     Authenticator* authenticator = NULL);
    + unsigned sendPlayCommand(MediaSubsession& subsession, responseHandler* responseHandler,
          double start = 0.0f, double end = -1.0f, float scale = 1.0f,
          Authenticator* authenticator = NULL);
    + unsigned sendPlayCommand(MediaSession& session, responseHandler* responseHandler,
          char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,
          Authenticator* authenticator = NULL);
    + unsigned sendPlayCommand(MediaSubsession& subsession, responseHandler* responseHandler,
          char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,
          Authenticator* authenticator = NULL);
    + unsigned sendPauseCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendPauseCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendRecordCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendRecordCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendTeardownCommand(MediaSession& session, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendTeardownCommand(MediaSubsession& subsession, responseHandler* responseHandler, Authenticator* authenticator = NULL);
    + unsigned sendSetParameterCommand(MediaSession& session, responseHandler* responseHandler,
          char const* parameterName, char const* parameterValue,
          Authenticator* authenticator = NULL);
    + unsigned sendGetParameterCommand(MediaSession& session, responseHandler* responseHandler, char const* parameterName,
          Authenticator* authenticator = NULL);
    + void sendDummyUDPPackets(MediaSession& session, unsigned numDummyPackets = 2);
    + void sendDummyUDPPackets(MediaSubsession& subsession, unsigned numDummyPackets = 2);
    + void setSpeed(MediaSession& session, float speed = 1.0f);
    + Boolean changeResponseHandler(unsigned cseq, responseHandler* newResponseHandler);
    + int socketNum() const { return fInputSocketNum; }
    + static Boolean lookupByName(UsageEnvironment& env,
          char const* sourceName,
          RTSPClient*& resultClient);
    + static Boolean parseRTSPURL(UsageEnvironment& env, char const* url,
          char*& username, char*& password, NetAddress& address, portNumBits& portNum, char const** urlSuffix = NULL);
    + void setUserAgentString(char const* userAgentName);
    + void disallowBasicAuthentication() { fAllowBasicAuthentication = False; }
    + unsigned sessionTimeoutParameter() const { return fSessionTimeoutParameter; }
    + char const* url() const { return fBaseURL; }
    + static unsigned responseBufferSize;
    # RTSPClient(UsageEnvironment& env, char const* rtspURL,
          int verbosityLevel, char const* applicationName, portNumBits tunnelOverHTTPPortNum, int socketNumToServer);
    # virtual ~RTSPClient();
    # void reset();
    # void setBaseURL(char const* url);
    # int grabSocket(); // allows a subclass to reuse our input socket, so that it won't get closed when we're deleted
    # virtual unsigned sendRequest(RequestRecord* request);
    # virtual Boolean setRequestFields(RequestRecord* request,
        char*& cmdURL, Boolean& cmdURLWasAllocated,
        char const*& protocolStr,
        char*& extraHeaders, Boolean& extraHeadersWereAllocated);
    - virtual Boolean isRTSPClient() const;
    - void resetTCPSockets();
    - void resetResponseBuffer();
    - int openConnection(); // -1: failure; 0: pending; 1: success
    - int connectToServer(int socketNum, portNumBits remotePortNum); // used to implement "openConnection()"; result values are the same
    - char* createAuthenticatorString(char const* cmd, char const* url);
    - char* createBlocksizeString(Boolean streamUsingTCP);
    - void handleRequestError(RequestRecord* request);
    - Boolean parseResponseCode(char const* line, unsigned& responseCode, char const*& responseString);
    - void handleIncomingRequest();
    - static Boolean checkForHeader(char const* line, char const* headerName, unsigned headerNameLength, char const*& headerParams);
    - Boolean parseTransportParams(char const* paramsStr,
          char*& serverAddressStr, portNumBits& serverPortNum,
          unsigned char& rtpChannelId, unsigned char& rtcpChannelId);
    - Boolean parseScaleParam(char const* paramStr, float& scale);
    - Boolean parseSpeedParam(char const* paramStr, float& speed);
    - Boolean parseRTPInfoParams(char const*& paramStr, u_int16_t& seqNum, u_int32_t& timestamp);
    - Boolean handleSETUPResponse(MediaSubsession& subsession, char const* sessionParamsStr, char const* transportParamsStr,
          Boolean streamUsingTCP);
    - Boolean handlePLAYResponse(MediaSession& session, MediaSubsession& subsession,
          char const* scaleParamsStr, const char* speedParamsStr,
          char const* rangeParamsStr, char const* rtpInfoParamsStr);
    - Boolean handleTEARDOWNResponse(MediaSession& session, MediaSubsession& subsession);
    - Boolean handleGET_PARAMETERResponse(char const* parameterName, char*& resultValueString);
    - Boolean handleAuthenticationFailure(char const* wwwAuthenticateParamsStr);
    - Boolean resendCommand(RequestRecord* request);
    - char const* sessionURL(MediaSession const& session) const;
    - static void handleAlternativeRequestByte(void*, u_int8_t requestByte);
    - void handleAlternativeRequestByte1(u_int8_t requestByte);
    - void constructSubsessionURL(MediaSubsession const& subsession,
          char const*& prefix,
          char const*& separator,
          char const*& suffix);
    - Boolean setupHTTPTunneling1(); // send the HTTP "GET"
    - static void responseHandlerForHTTP_GET(RTSPClient* rtspClient, int responseCode, char* responseString);
    - void responseHandlerForHTTP_GET1(int responseCode, char* responseString);
    - Boolean setupHTTPTunneling2(); // send the HTTP "POST"
    - static void connectionHandler(void*, int /*mask*/);
    - void connectionHandler1();
    - static void incomingDataHandler(void*, int /*mask*/);
    - void incomingDataHandler1();
    - void handleResponseBytes(int newBytesRead);
    + u_int16_t desiredMaxIncomingPacketSize;
    # int fVerbosityLevel;
    # unsigned fCSeq;
    # Authenticator fCurrentAuthenticator;
    # Boolean fAllowBasicAuthentication;
    # netAddressBits fServerAddress;
    - portNumBits fTunnelOverHTTPPortNum;
    - char* fUserAgentHeaderStr;
    - unsigned fUserAgentHeaderStrLen;
    - int fInputSocketNum, fOutputSocketNum;
    - char* fBaseURL;
    - unsigned char fTCPStreamIdCount; // used for (optional) RTP/TCP
    - char* fLastSessionId;
    - unsigned fSessionTimeoutParameter; // optionally set in response "Session:" headers
    - char* fResponseBuffer;
    - unsigned fResponseBytesAlreadySeen, fResponseBufferBytesLeft;
    - RequestQueue fRequestsAwaitingConnection, fRequestsAwaitingHTTPTunneling, fRequestsAwaitingResponse;
    - char fSessionCookie[33];
    - unsigned fSessionCookieCounter;
    - Boolean fHTTPTunnelingConnectionIsPending;
}


class RequestQueue {
    + RequestQueue();
    + RequestQueue(RequestQueue& origQueue);
    + virtual ~RequestQueue();
    + void enqueue(RequestRecord* request);
    + RequestRecord* dequeue();
    + void putAtHead(RequestRecord* request);
    + RequestRecord* findByCSeq(unsigned cseq);
    + Boolean isEmpty() const { return fHead == NULL; }
    - RequestRecord* fHead;
    - RequestRecord* fTail;
}


class RequestRecord {
    + RequestRecord(unsigned cseq, char const* commandName, responseHandler* handler,
          MediaSession* session = NULL, MediaSubsession* subsession = NULL, u_int32_t booleanFlags = 0,
          double start = 0.0f, double end = -1.0f, float scale = 1.0f, char const* contentStr = NULL);
    + RequestRecord(unsigned cseq, responseHandler* handler,
          char const* absStartTime, char const* absEndTime = NULL, float scale = 1.0f,
          MediaSession* session = NULL, MediaSubsession* subsession = NULL);
    + virtual ~RequestRecord();
    + RequestRecord*& next() { return fNext; }
    + unsigned& cseq() { return fCSeq; }
    + char const* commandName() const { return fCommandName; }
    + MediaSession* session() const { return fSession; }
    + MediaSubsession* subsession() const { return fSubsession; }
    + u_int32_t booleanFlags() const { return fBooleanFlags; }
    + double start() const { return fStart; }
    + double end() const { return fEnd; }
    + char const* absStartTime() const { return fAbsStartTime; }
    + char const* absEndTime() const { return fAbsEndTime; }
    + float scale() const { return fScale; }
    + char* contentStr() const { return fContentStr; }
    + responseHandler*& handler() { return fHandler; }
    - RequestRecord* fNext;
    - unsigned fCSeq;
    - char const* fCommandName;
    - MediaSession* fSession;
    - MediaSubsession* fSubsession;
    - u_int32_t fBooleanFlags;
    - double fStart, fEnd;
    - char *fAbsStartTime, *fAbsEndTime;
    - float fScale;
    - char* fContentStr;
    - responseHandler* fHandler;
}


class ProxyRTSPClient {
    + ProxyRTSPClient(class ProxyServerMediaSession& ourServerMediaSession, char const* rtspURL,
        char const* username, char const* password,
        portNumBits tunnelOverHTTPPortNum, int verbosityLevel, int socketNumToServer);
    + virtual ~ProxyRTSPClient();
    + void continueAfterDESCRIBE(char const* sdpDescription);
    + void continueAfterLivenessCommand(int resultCode, Boolean serverSupportsGetParameter);
    + void continueAfterSETUP();
    - void reset();
    - Authenticator* auth() { return fOurAuthenticator; }
    - void scheduleLivenessCommand();
    - static void sendLivenessCommand(void* clientData);
    - void scheduleDESCRIBECommand();
    - static void sendDESCRIBE(void* clientData);
    - static void subsessionTimeout(void* clientData);
    - void handleSubsessionTimeout();
    - friend class ProxyServerMediaSession;
    - friend class ProxyServerMediaSubsession;
    - ProxyServerMediaSession& fOurServerMediaSession;
    - char* fOurURL;
    - Authenticator* fOurAuthenticator;
    - Boolean fStreamRTPOverTCP;
    - class ProxyServerMediaSubsession *fSetupQueueHead, *fSetupQueueTail;
    - unsigned fNumSetupsDone;
    - unsigned fNextDESCRIBEDelay; // in seconds
    - Boolean fServerSupportsGetParameter, fLastCommandWasPLAY;
    - TaskToken fLivenessCommandTask, fDESCRIBECommandTask, fSubsessionTimerTask;
}


class ServerMediaSession {
    + static ServerMediaSession* createNew(UsageEnvironment& env,
                        char const* streamName = NULL,
                        char const* info = NULL,
                        char const* description = NULL,
                        Boolean isSSM = False,
                        char const* miscSDPLines = NULL);
    + static Boolean lookupByName(UsageEnvironment& env,
                                char const* mediumName,
                                ServerMediaSession*& resultSession);
    + char* generateSDPDescription(); // based on the entire session
    + char const* streamName() const { return fStreamName; }
    + Boolean addSubsession(ServerMediaSubsession* subsession);
    + unsigned numSubsessions() const { return fSubsessionCounter; }
    + void testScaleFactor(float& scale); // sets "scale" to the actual supported scale
    + float duration() const;
    + unsigned referenceCount() const { return fReferenceCount; }
    + void incrementReferenceCount() { ++fReferenceCount; }
    + void decrementReferenceCount() { if (fReferenceCount > 0) - -fReferenceCount; }
    + Boolean& deleteWhenUnreferenced() { return fDeleteWhenUnreferenced; }
    + void deleteAllSubsessions();
    # ServerMediaSession(UsageEnvironment& env, char const* streamName,
                char const* info, char const* description,
                Boolean isSSM, char const* miscSDPLines);
    # virtual ~ServerMediaSession();
    - virtual Boolean isServerMediaSession() const;
    - Boolean fIsSSM;
    - friend class ServerMediaSubsessionIterator;
    - ServerMediaSubsession* fSubsessionsHead;
    - ServerMediaSubsession* fSubsessionsTail;
    - unsigned fSubsessionCounter;
    - char* fStreamName;
    - char* fInfoSDPString;
    - char* fDescriptionSDPString;
    - char* fMiscSDPLines;
    - struct timeval fCreationTime;
    - unsigned fReferenceCount;
    - Boolean fDeleteWhenUnreferenced;
}


class ServerMediaSubsession {
    + unsigned trackNumber() const { return fTrackNumber; }
    + char const* trackId();
    + virtual char const* sdpLines() = 0;
    + virtual void getStreamParameters(unsigned clientSessionId, // in
                    netAddressBits clientAddress, // in
                    Port const& clientRTPPort, // in
                    Port const& clientRTCPPort, // in
                    int tcpSocketNum, // in (-1 means use UDP, not TCP)
                    unsigned char rtpChannelId, // in (used if TCP)
                    unsigned char rtcpChannelId, // in (used if TCP)
                    netAddressBits& destinationAddress, // in out
                    u_int8_t& destinationTTL, // in out
                    Boolean& isMulticast, // out
                    Port& serverRTPPort, // out
                    Port& serverRTCPPort, // out
                    void*& streamToken // out
                    ) = 0;
    + virtual void startStream(unsigned clientSessionId, void* streamToken,
                TaskFunc* rtcpRRHandler,
                void* rtcpRRHandlerClientData,
                unsigned short& rtpSeqNum,
                unsigned& rtpTimestamp,
                ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,
                void* serverRequestAlternativeByteHandlerClientData) = 0;
    + virtual void pauseStream(unsigned clientSessionId, void* streamToken);
    + virtual void seekStream(unsigned clientSessionId, void* streamToken, double& seekNPT,
                double streamDuration, u_int64_t& numBytes);
    + virtual void seekStream(unsigned clientSessionId, void* streamToken, char*& absStart, char*& absEnd);
    + virtual void nullSeekStream(unsigned clientSessionId, void* streamToken,
                    double streamEndTime, u_int64_t& numBytes);
    + virtual void setStreamScale(unsigned clientSessionId, void* streamToken, float scale);
    + virtual float getCurrentNPT(void* streamToken);
    + virtual FramedSource* getStreamSource(void* streamToken);
    + virtual void deleteStream(unsigned clientSessionId, void*& streamToken);
    + virtual void testScaleFactor(float& scale); // sets "scale" to the actual supported scale
    + virtual float duration() const;
    + virtual void getAbsoluteTimeRange(char*& absStartTime, char*& absEndTime) const;
    + void setServerAddressAndPortForSDP(netAddressBits addressBits,
                        portNumBits portBits);
    # ServerMediaSubsession(UsageEnvironment& env);
    # virtual ~ServerMediaSubsession();
    # char const* rangeSDPLine() const;
    # ServerMediaSession* fParentSession;
    # netAddressBits fServerAddressForSDP;
    # portNumBits fPortNumForSDP;
    - friend class ServerMediaSession;
    - friend class ServerMediaSubsessionIterator;
    - ServerMediaSubsession* fNext;
    - unsigned fTrackNumber;
    - char const* fTrackId;
}


class ServerMediaSubsessionIterator {
    + ServerMediaSubsessionIterator(ServerMediaSession& session);
    + virtual ~ServerMediaSubsessionIterator();
    + ServerMediaSubsession* next(); // NULL if none
    + void reset();
    - ServerMediaSession& fOurSession;
    - ServerMediaSubsession* fNextPtr;
}


class ProxyServerMediaSession {
    + static ProxyServerMediaSession* createNew(UsageEnvironment& env,
        RTSPServer* ourRTSPServer,
        char const* inputStreamURL,
        char const* streamName = NULL,
        char const* username = NULL, char const* password = NULL,
        portNumBits tunnelOverHTTPPortNum = 0,
        int verbosityLevel = 0,
        int socketNumToServer = -1);
    + virtual ~ProxyServerMediaSession();
    + char const* url() const;
    + char describeCompletedFlag;
    + Boolean describeCompletedSuccessfully() const { return fClientMediaSession != NULL; }
    # ProxyServerMediaSession(UsageEnvironment& env, RTSPServer* ourRTSPServer,
        char const* inputStreamURL, char const* streamName,
        char const* username, char const* password,
        portNumBits tunnelOverHTTPPortNum, int verbosityLevel,
        int socketNumToServer,
        createNewProxyRTSPClientFunc* ourCreateNewProxyRTSPClientFunc
        = defaultCreateNewProxyRTSPClientFunc);
    # RTSPServer* fOurRTSPServer;
    # ProxyRTSPClient* fProxyRTSPClient;
    # MediaSession* fClientMediaSession;
    - friend class ProxyRTSPClient;
    - friend class ProxyServerMediaSubsession;
    - void continueAfterDESCRIBE(char const* sdpDescription);
    - void resetDESCRIBEState(); // undoes what was done by "contineAfterDESCRIBE()"
    - int fVerbosityLevel;
    - class PresentationTimeSessionNormalizer* fPresentationTimeSessionNormalizer;
    - createNewProxyRTSPClientFunc* fCreateNewProxyRTSPClientFunc;
}


class FramedSource {
    + static Boolean lookupByName(UsageEnvironment& env, char const* sourceName,
          FramedSource*& resultSource);
    + typedef void(afterGettingFunc)(void* clientData, unsigned frameSize,
          unsigned numTruncatedBytes,
          struct timeval presentationTime,
          unsigned durationInMicroseconds);
    + typedef void(onCloseFunc)(void* clientData);
    + void getNextFrame(unsigned char* to, unsigned maxSize,
          afterGettingFunc* afterGettingFunc,
          void* afterGettingClientData,
          onCloseFunc* onCloseFunc,
          void* onCloseClientData);
    + static void handleClosure(void* clientData);
    + void handleClosure();
    + void stopGettingFrames();
    + virtual unsigned maxFrameSize() const;
    + virtual void doGetNextFrame() = 0;
    + Boolean isCurrentlyAwaitingData() const;
    + static void afterGetting(FramedSource* source);
    # FramedSource(UsageEnvironment& env);
    # virtual ~FramedSource();
    # virtual void doStopGettingFrames();
    # unsigned char* fTo;
    # unsigned fMaxSize;
    # unsigned fFrameSize;
    # unsigned fNumTruncatedBytes;
    # struct timeval fPresentationTime;
    # unsigned fDurationInMicroseconds;
    - virtual Boolean isFramedSource() const;
    - afterGettingFunc* fAfterGettingFunc;
    - void* fAfterGettingClientData;
    - onCloseFunc* fOnCloseFunc;
    - void* fOnCloseClientData;
    - Boolean fIsCurrentlyAwaitingData;
}


class FramedFilter {
    + FramedSource* inputSource() const;
    + void reassignInputSource(FramedSource* newInputSource);
    + void detachInputSource();
    # FramedFilter(UsageEnvironment& env, FramedSource* inputSource);
    # virtual ~FramedFilter();
    # virtual char const* MIMEtype() const;
    # virtual void getAttributes() const;
    # virtual void doStopGettingFrames();
    # FramedSource* fInputSource;
}


class PresentationTimeSubsessionNormalizer {
    + void setRTPSink(RTPSink* rtpSink);
    - friend class PresentationTimeSessionNormalizer;
    - PresentationTimeSubsessionNormalizer(PresentationTimeSessionNormalizer& parent, FramedSource* inputSource, RTPSource* rtpSource,
          char const* codecName, PresentationTimeSubsessionNormalizer* next);
    - virtual ~PresentationTimeSubsessionNormalizer();
    - static void afterGettingFrame(void* clientData, unsigned frameSize, unsigned numTruncatedBytes,
          struct timeval presentationTime, unsigned durationInMicroseconds);
    - void afterGettingFrame(unsigned frameSize, unsigned numTruncatedBytes, struct timeval presentationTime, unsigned durationInMicroseconds);
    - virtual void doGetNextFrame();
    - PresentationTimeSessionNormalizer& fParent;
    - RTPSource* fRTPSource;
    - RTPSink* fRTPSink;
    - char const* fCodecName;
    - PresentationTimeSubsessionNormalizer* fNext;
}


class PresentationTimeSessionNormalizer {
    + PresentationTimeSessionNormalizer(UsageEnvironment& env);
    + virtual ~PresentationTimeSessionNormalizer();
    + PresentationTimeSubsessionNormalizer*
    + createNewPresentationTimeSubsessionNormalizer(FramedSource* inputSource, RTPSource* rtpSource, char const* codecName);

    - friend class PresentationTimeSubsessionNormalizer;
    - void normalizePresentationTime(PresentationTimeSubsessionNormalizer* ssNormalizer,
          struct timeval& toPT, struct timeval const& fromPT);
    - void removePresentationTimeSubsessionNormalizer(PresentationTimeSubsessionNormalizer* ssNormalizer);
    - PresentationTimeSubsessionNormalizer* fSubsessionNormalizers;
    - PresentationTimeSubsessionNormalizer* fMasterSSNormalizer;
    - struct timeval fPTAdjustment;
}


class OnDemandServerMediaSubsession {
    protected: // we're a virtual base class
    # OnDemandServerMediaSubsession(UsageEnvironment& env, Boolean reuseFirstSource,
                portNumBits initialPortNum = 6970,
                Boolean multiplexRTCPWithRTP = False);
    # virtual ~OnDemandServerMediaSubsession();
    # virtual char const* sdpLines();
    # virtual void getStreamParameters(unsigned clientSessionId,
                                        netAddressBits clientAddress,
                                        Port const& clientRTPPort,
                                        Port const& clientRTCPPort,
                                        int tcpSocketNum,
                                        unsigned char rtpChannelId,
                                        unsigned char rtcpChannelId,
                                        netAddressBits& destinationAddress,
                                        u_int8_t& destinationTTL,
                                        Boolean& isMulticast,
                                        Port& serverRTPPort,
                                        Port& serverRTCPPort,
                                        void*& streamToken);
    # virtual void startStream(unsigned clientSessionId, void* streamToken,
                                TaskFunc* rtcpRRHandler,
                                void* rtcpRRHandlerClientData,
                                unsigned short& rtpSeqNum,
                                unsigned& rtpTimestamp,
                                ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,
                                void* serverRequestAlternativeByteHandlerClientData);
    # virtual void pauseStream(unsigned clientSessionId, void* streamToken);
    # virtual void seekStream(unsigned clientSessionId, void* streamToken, double& seekNPT, double streamDuration, u_int64_t& numBytes);
    # virtual void seekStream(unsigned clientSessionId, void* streamToken, char*& absStart, char*& absEnd);
    # virtual void nullSeekStream(unsigned clientSessionId, void* streamToken,
                      double streamEndTime, u_int64_t& numBytes);
    # virtual void setStreamScale(unsigned clientSessionId, void* streamToken, float scale);
    # virtual float getCurrentNPT(void* streamToken);
    # virtual FramedSource* getStreamSource(void* streamToken);
    # virtual void deleteStream(unsigned clientSessionId, void*& streamToken);
    # virtual char const* getAuxSDPLine(RTPSink* rtpSink,
                      FramedSource* inputSource);
    # virtual void seekStreamSource(FramedSource* inputSource, double& seekNPT, double streamDuration, u_int64_t& numBytes);
    # virtual void seekStreamSource(FramedSource* inputSource, char*& absStart, char*& absEnd);
    # virtual void setStreamSourceScale(FramedSource* inputSource, float scale);
    # virtual void setStreamSourceDuration(FramedSource* inputSource, double streamDuration, u_int64_t& numBytes);
    # virtual void closeStreamSource(FramedSource* inputSource);
    # protected: // new virtual functions, defined by all subclasses
    # virtual FramedSource* createNewStreamSource(unsigned clientSessionId,
                              unsigned& estBitrate) = 0;
    # virtual RTPSink* createNewRTPSink(Groupsock* rtpGroupsock,
                      unsigned char rtpPayloadTypeIfDynamic,
                      FramedSource* inputSource) = 0;
    # virtual Groupsock* createGroupsock(struct in_addr const& addr, Port port);
    + void multiplexRTCPWithRTP() { fMultiplexRTCPWithRTP = True; }
    + void setRTCPAppPacketHandler(RTCPAppHandlerFunc* handler, void* clientData);
    + void sendRTCPAppPacket(u_int8_t subtype, char const* name,
                u_int8_t* appDependentData, unsigned appDependentDataSize);
    - void setSDPLinesFromRTPSink(RTPSink* rtpSink, FramedSource* inputSource,
                    unsigned estBitrate);
    # char* fSDPLines;
    # HashTable* fDestinationsHashTable; // indexed by client session id
    # private:
    # Boolean fReuseFirstSource;
    # portNumBits fInitialPortNum;
    # Boolean fMultiplexRTCPWithRTP;
    # void* fLastStreamToken;
    # char fCNAME[100]; // for RTCP
    # RTCPAppHandlerFunc* fAppHandlerTask;
    # void* fAppHandlerClientData;
    # friend class StreamState;
}


class Destinations {
    + Destinations(struct in_addr const& destAddr,
                    Port const& rtpDestPort,
                    Port const& rtcpDestPort);
    + Destinations(int tcpSockNum, unsigned char rtpChanId, unsigned char rtcpChanId);
    + Boolean isTCP;
    + struct in_addr addr;
    + Port rtpPort;
    + Port rtcpPort;
    + int tcpSocketNum;
    + unsigned char rtpChannelId, rtcpChannelId;
}


class StreamState {
    + StreamState(OnDemandServerMediaSubsession& master,
                Port const& serverRTPPort, Port const& serverRTCPPort,
                RTPSink* rtpSink, BasicUDPSink* udpSink,
                unsigned totalBW, FramedSource* mediaSource,
                Groupsock* rtpGS, Groupsock* rtcpGS);
    + virtual ~StreamState();
    + void startPlaying(Destinations* destinations,
                        TaskFunc* rtcpRRHandler, void* rtcpRRHandlerClientData,
                        ServerRequestAlternativeByteHandler* serverRequestAlternativeByteHandler,
                        void* serverRequestAlternativeByteHandlerClientData);
    + void pause();
    + void sendRTCPAppPacket(u_int8_t subtype, char const* name,
                u_int8_t* appDependentData, unsigned appDependentDataSize);
    + void endPlaying(Destinations* destinations);
    + void reclaim();
    + unsigned& referenceCount() { return fReferenceCount; }
    + Port const& serverRTPPort() const { return fServerRTPPort; }
    + Port const& serverRTCPPort() const { return fServerRTCPPort; }
    + RTPSink* rtpSink() const { return fRTPSink; }
    + float streamDuration() const { return fStreamDuration; }
    + FramedSource* mediaSource() const { return fMediaSource; }
    + float& startNPT() { return fStartNPT; }
    + private:
    + OnDemandServerMediaSubsession& fMaster;
    + Boolean fAreCurrentlyPlaying;
    + unsigned fReferenceCount;
    + Port fServerRTPPort, fServerRTCPPort;
    + RTPSink* fRTPSink;
    + BasicUDPSink* fUDPSink;
    + float fStreamDuration;
    + unsigned fTotalBW;
    + RTCPInstance* fRTCPInstance;
    + FramedSource* fMediaSource;
    + float fStartNPT;
    + Groupsock* fRTPgs;
    + Groupsock* fRTCPgs;
}


class ProxyServerMediaSubsession {
    + ProxyServerMediaSubsession(MediaSubsession& mediaSubsession);
    + virtual ~ProxyServerMediaSubsession();
    + char const* codecName() const { return fClientMediaSubsession.codecName(); }
    + char const* mediumName() const { return fClientMediaSubsession.mediumName(); }
    + unsigned char rtpPayloadFormat() const { return fClientMediaSubsession.rtpPayloadFormat(); }
    + virtual FramedSource* createNewStreamSource(unsigned clientSessionId,
          unsigned& estBitrate);
    + virtual void closeStreamSource(FramedSource* inputSource);
    + virtual RTPSink* createNewRTPSink(Groupsock* rtpGroupsock,
        unsigned char rtpPayloadTypeIfDynamic,
        FramedSource* inputSource);
    - static void subsessionByeHandler(void* clientData);
    - void subsessionByeHandler();
    - int verbosityLevel() const { return ((ProxyServerMediaSession*)fParentSession)->fVerbosityLevel; }
    - friend class ProxyRTSPClient;
    - MediaSubsession& fClientMediaSubsession; // the 'client' media subsession object that corresponds to this 'server' media subsession
    - ProxyServerMediaSubsession* fNext; // used when we're part of a queue
    - Boolean fHaveSetupStream;
}


class HandlerServerForREGISTERCommand {
    + static HandlerServerForREGISTERCommand* createNew(UsageEnvironment& env, onRTSPClientCreationFunc* creationFunc,
        Port ourPort = 0, UserAuthenticationDatabase* authDatabase = NULL,
        int verbosityLevel = 0, char const* applicationName = NULL);
    + portNumBits serverPortNum() const { return ntohs(fServerPort.num()); }
    # HandlerServerForREGISTERCommand(UsageEnvironment& env, onRTSPClientCreationFunc* creationFunc, int ourSocket, Port ourPort,
        UserAuthenticationDatabase* authDatabase, int verbosityLevel, char const* applicationName);
    # virtual ~HandlerServerForREGISTERCommand();
    # virtual RTSPClient* createNewRTSPClient(char const* rtspURL, int verbosityLevel, char const* applicationName,
        int socketNumToServer);
    # virtual char const* allowedCommandNames(); // we support "OPTIONS" and "REGISTER" only
    # virtual Boolean weImplementREGISTER(char const* proxyURLSuffix, char*& responseStr); // redefined to return True
    # virtual void implementCmd_REGISTER(char const* url, char const* urlSuffix, int socketToRemoteServer,
        Boolean deliverViaTCP, char const* proxyURLSuffix);
    - onRTSPClientCreationFunc* fCreationFunc;
    - int fVerbosityLevel;
    - char* fApplicationName;
}
Medium <|.. RTSPClient
RTSPClient *- - RequestQueue
RTSPClient *- - RequestRecord
RTSPClient <|- - ProxyRTSPClient
Medium <|.. ServerMediaSession
Medium <|.. ServerMediaSubsession
ServerMediaSubsessionIterator <- -ServerMediaSubsession
ServerMediaSession <|- - ProxyServerMediaSession
FramedSource <|.. FramedFilter
FramedFilter <|- - PresentationTimeSubsessionNormalizer
Medium <|- - PresentationTimeSessionNormalizer
ServerMediaSubsession <|- - OnDemandServerMediaSubsession
Destinations <- - OnDemandServerMediaSubsession
Destinations <- - StreamState
StreamState <- - OnDemandServerMediaSubsession
OnDemandServerMediaSubsession <|- - ProxyServerMediaSubsession
RTSPServer <|- - HandlerServerForREGISTERCommand


@enduml

PlantUML version 1.2018.00(Fri Jan 05 03:42:56 CST 2018)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_131-b11
Operating System: Windows 10
OS Version: 10.0
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>