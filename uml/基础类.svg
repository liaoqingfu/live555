<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1337px" preserveAspectRatio="none" style="width:1035px;height:1337px;" version="1.1" viewBox="0 0 1035 1337" width="1035px" zoomAndPan="magnify"><defs><filter height="300%" id="f4ao39r0djh4" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--class UsageEnvironment--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="378.5049" id="UsageEnvironment" style="stroke: #A80036; stroke-width: 1.5;" width="418" x="6" y="356"/><ellipse cx="157.75" cy="372" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M156.3281,377.3594 Q154.4688,377.3594 153.375,375.9688 Q152.2813,374.5781 152.2813,371.5938 Q152.2813,369.0625 153.4453,367.4063 Q154.6094,365.75 156.5938,365.75 Q158.0625,365.75 158.5313,365.875 Q159,366.0781 159,366.0781 Q159,366.0781 159,366.0078 Q159,365.9375 159.6094,365.0156 L160.6563,368.6719 L159.3281,369.0781 Q158.8594,367.5313 158.1953,366.8672 Q157.5313,366.2031 156.4688,366.2031 Q156.0781,366.2031 155.3125,367.7344 Q154.5469,369.2656 154.5469,371.5156 Q154.5469,373.9844 155.2109,375.375 Q155.875,376.7656 156.4063,376.7656 Q157.4688,376.7656 158.2266,376 Q158.9844,375.2344 159.3281,373.5781 L160.6563,374.1719 Q160.3281,375.5781 159.4297,376.4688 Q158.5313,377.3594 156.3281,377.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="106" x="178.25" y="377.5576">UsageEnvironment</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="423" y1="388" y2="388"/><ellipse cx="17" cy="401.0115" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="150" x="26" y="404.606">typedef char const* MsgString;</text><ellipse cx="17" cy="416.0344" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="92" x="26" y="419.6289">void* liveMediaPriv;</text><ellipse cx="17" cy="431.0574" fill="none" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="99" x="26" y="434.6519">void* groupsockPriv;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="14" y="443.0803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="138" x="26" y="449.6748">TaskScheduler&amp; fScheduler;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="7" x2="423" y1="456.0918" y2="456.0918"/><ellipse cx="17" cy="469.1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="87" x="26" y="472.6978">Boolean reclaim();</text><ellipse cx="17" cy="484.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="162" x="26" y="487.7207">TaskScheduler&amp; taskScheduler();</text><ellipse cx="17" cy="499.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="207" x="26" y="502.7437">virtual MsgString getResultMsg() const = 0;</text><ellipse cx="17" cy="514.1721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="26" y="517.7666">virtual void setResultMsg(MsgString msg);</text><ellipse cx="17" cy="529.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="26" y="532.7896">virtual void setResultMsg(MsgString msg1, MsgString msg2) = 0;</text><ellipse cx="17" cy="544.218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="392" x="26" y="547.8125">virtual void setResultMsg(MsgString msg1, MsgString msg2, MsgString msg3) = 0;</text><ellipse cx="17" cy="559.241" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="26" y="562.8354">virtual void setResultErrMsg(MsgString msg, int err = 0) = 0;</text><ellipse cx="17" cy="574.2639" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="253" x="26" y="577.8584">virtual void appendToResultMsg(MsgString msg) = 0;</text><ellipse cx="17" cy="589.2869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="195" x="26" y="592.8813">virtual void reportBackgroundError() = 0;</text><ellipse cx="17" cy="604.3098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="125" x="26" y="607.9043">virtual void internalError();</text><ellipse cx="17" cy="619.3328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="146" x="26" y="622.9272">virtual int getErrno() const = 0;</text><ellipse cx="17" cy="634.3557" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="286" x="26" y="637.9502">virtual UsageEnvironment&amp; operator&lt;&lt;(char const* str) = 0;</text><ellipse cx="17" cy="649.3787" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="230" x="26" y="652.9731">virtual UsageEnvironment&amp; operator&lt;&lt;(int i) = 0;</text><ellipse cx="17" cy="664.4016" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="267" x="26" y="667.9961">virtual UsageEnvironment&amp; operator&lt;&lt;(unsigned u) = 0;</text><ellipse cx="17" cy="679.4246" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="255" x="26" y="683.019">virtual UsageEnvironment&amp; operator&lt;&lt;(double d) = 0;</text><ellipse cx="17" cy="694.4475" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="247" x="26" y="698.042">virtual UsageEnvironment&amp; operator&lt;&lt;(void* p) = 0;</text><polygon fill="#FFFF44" points="17,704.4705,21,708.4705,17,712.4705,13,708.4705" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="231" x="26" y="713.0649">UsageEnvironment(TaskScheduler&amp; scheduler);</text><polygon fill="#FFFF44" points="17,719.4934,21,723.4934,17,727.4934,13,723.4934" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="139" x="26" y="728.0879">virtual ~UsageEnvironment();</text><!--class TaskScheduler--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="288.3672" id="TaskScheduler" style="stroke: #A80036; stroke-width: 1.5;" width="638" x="144" y="8"/><ellipse cx="417.25" cy="24" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M415.8281,29.3594 Q413.9688,29.3594 412.875,27.9688 Q411.7813,26.5781 411.7813,23.5938 Q411.7813,21.0625 412.9453,19.4063 Q414.1094,17.75 416.0938,17.75 Q417.5625,17.75 418.0313,17.875 Q418.5,18.0781 418.5,18.0781 Q418.5,18.0781 418.5,18.0078 Q418.5,17.9375 419.1094,17.0156 L420.1563,20.6719 L418.8281,21.0781 Q418.3594,19.5313 417.6953,18.8672 Q417.0313,18.2031 415.9688,18.2031 Q415.5781,18.2031 414.8125,19.7344 Q414.0469,21.2656 414.0469,23.5156 Q414.0469,25.9844 414.7109,27.375 Q415.375,28.7656 415.9063,28.7656 Q416.9688,28.7656 417.7266,28 Q418.4844,27.2344 418.8281,25.5781 L420.1563,26.1719 Q419.8281,27.5781 418.9297,28.4688 Q418.0313,29.3594 415.8281,29.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="83" x="437.75" y="29.5576">TaskScheduler</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="145" x2="781" y1="40" y2="40"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="145" x2="781" y1="48" y2="48"/><ellipse cx="155" cy="61.0115" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="121" x="164" y="64.606">virtual ~TaskScheduler();</text><ellipse cx="155" cy="76.0344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="487" x="164" y="79.6289">virtual TaskToken scheduleDelayedTask(int64_t microseconds, TaskFunc* proc, void* clientData) = 0;</text><ellipse cx="155" cy="91.0574" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="309" x="164" y="94.6519">virtual void unscheduleDelayedTask(TaskToken&amp; prevTask) = 0;</text><ellipse cx="155" cy="106.0803" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="535" x="164" y="109.6748">virtual void rescheduleDelayedTask(TaskToken&amp; task, int64_t microseconds, TaskFunc* proc, void* clientData);</text><ellipse cx="155" cy="121.1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="310" x="164" y="124.6978">typedef void BackgroundHandlerProc(void* clientData, int mask);</text><ellipse cx="155" cy="136.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="612" x="164" y="139.7207">virtual void setBackgroundHandling(int socketNum, int conditionSet, BackgroundHandlerProc* handlerProc, void* clientData) = 0;</text><ellipse cx="155" cy="151.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="502" x="164" y="154.7437">void disableBackgroundHandling(int socketNum) { setBackgroundHandling(socketNum, 0, NULL, NULL); }</text><ellipse cx="155" cy="166.1721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="362" x="164" y="169.7666">virtual void moveSocketHandling(int oldSocketNum, int newSocketNum) = 0;</text><ellipse cx="155" cy="181.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="164" y="184.7896">virtual void doEventLoop(char* watchVariable = NULL) = 0;</text><ellipse cx="155" cy="196.218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="365" x="164" y="199.8125">virtual EventTriggerId createEventTrigger(TaskFunc* eventHandlerProc) = 0;</text><ellipse cx="155" cy="211.241" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="315" x="164" y="214.8354">virtual void deleteEventTrigger(EventTriggerId eventTriggerId) = 0;</text><ellipse cx="155" cy="226.2639" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="401" x="164" y="229.8584">virtual void triggerEvent(EventTriggerId eventTriggerId, void* clientData = NULL) = 0;</text><ellipse cx="155" cy="241.2869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="526" x="164" y="244.8813">void turnOnBackgroundReadHandling(int socketNum, BackgroundHandlerProc* handlerProc, void* clientData);</text><ellipse cx="155" cy="256.3098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="471" x="164" y="259.9043">void turnOffBackgroundReadHandling(int socketNum) { disableBackgroundHandling(socketNum); }</text><ellipse cx="155" cy="271.3328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="493" x="164" y="274.9272">virtual void internalError(); // used to 'handle' a 'should not occur'-type error condition within the library.</text><polygon fill="#FFFF44" points="155,281.3557,159,285.3557,155,289.3557,151,285.3557" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="83" x="164" y="289.9502">TaskScheduler();</text><!--class BasicUsageEnvironment0--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="288.3672" id="BasicUsageEnvironment0" style="stroke: #A80036; stroke-width: 1.5;" width="311" x="57.5" y="795"/><ellipse cx="136.75" cy="811" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M135.3281,816.3594 Q133.4688,816.3594 132.375,814.9688 Q131.2813,813.5781 131.2813,810.5938 Q131.2813,808.0625 132.4453,806.4063 Q133.6094,804.75 135.5938,804.75 Q137.0625,804.75 137.5313,804.875 Q138,805.0781 138,805.0781 Q138,805.0781 138,805.0078 Q138,804.9375 138.6094,804.0156 L139.6563,807.6719 L138.3281,808.0781 Q137.8594,806.5313 137.1953,805.8672 Q136.5313,805.2031 135.4688,805.2031 Q135.0781,805.2031 134.3125,806.7344 Q133.5469,808.2656 133.5469,810.5156 Q133.5469,812.9844 134.2109,814.375 Q134.875,815.7656 135.4063,815.7656 Q136.4688,815.7656 137.2266,815 Q137.9844,814.2344 138.3281,812.5781 L139.6563,813.1719 Q139.3281,814.5781 138.4297,815.4688 Q137.5313,816.3594 135.3281,816.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="144" x="157.25" y="816.5576">BasicUsageEnvironment0</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="58.5" x2="367.5" y1="827" y2="827"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="80" x="77.5" y="843.606">MsgString msg2,</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="65.5" y="852.0344"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="261" x="77.5" y="858.6289">char fResultMsgBuffer[RESULT_MSG_BUFFER_MAX];</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="65.5" y="867.0574"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="123" x="77.5" y="873.6519">unsigned fCurBufferSize;</text><rect fill="none" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="65.5" y="882.0803"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="126" x="77.5" y="888.6748">unsigned fBufferMaxSize;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="58.5" x2="367.5" y1="895.0918" y2="895.0918"/><ellipse cx="68.5" cy="908.1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="189" x="77.5" y="911.6978">virtual MsgString getResultMsg() const;</text><ellipse cx="68.5" cy="923.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="202" x="77.5" y="926.7207">virtual void setResultMsg(MsgString msg);</text><ellipse cx="68.5" cy="938.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="77.5" y="941.7437">virtual void setResultMsg(MsgString msg1,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="77.5" y="956.7666">MsgString msg2);</text><ellipse cx="68.5" cy="968.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="204" x="77.5" y="971.7896">virtual void setResultMsg(MsgString msg1,</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="84" x="77.5" y="986.8125">MsgString msg3);</text><ellipse cx="68.5" cy="998.241" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="77.5" y="1001.8354">virtual void setResultErrMsg(MsgString msg, int err = 0);</text><ellipse cx="68.5" cy="1013.2639" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="235" x="77.5" y="1016.8584">virtual void appendToResultMsg(MsgString msg);</text><ellipse cx="68.5" cy="1028.2869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="177" x="77.5" y="1031.8813">virtual void reportBackgroundError();</text><polygon fill="#FFFF44" points="68.5,1038.3098,72.5,1042.3098,68.5,1046.3098,64.5,1042.3098" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="285" x="77.5" y="1046.9043">BasicUsageEnvironment0(TaskScheduler&amp; taskScheduler);</text><polygon fill="#FFFF44" points="68.5,1053.3328,72.5,1057.3328,68.5,1061.3328,64.5,1057.3328" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="172" x="77.5" y="1061.9272">virtual ~BasicUsageEnvironment0();</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="65.5" y="1070.3557"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="59" x="77.5" y="1076.9502">void reset();</text><!--class BasicTaskScheduler0--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="303.3901" id="BasicTaskScheduler0" style="stroke: #A80036; stroke-width: 1.5;" width="500" x="462" y="394"/><ellipse cx="647.25" cy="410" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M645.8281,415.3594 Q643.9688,415.3594 642.875,413.9688 Q641.7813,412.5781 641.7813,409.5938 Q641.7813,407.0625 642.9453,405.4063 Q644.1094,403.75 646.0938,403.75 Q647.5625,403.75 648.0313,403.875 Q648.5,404.0781 648.5,404.0781 Q648.5,404.0781 648.5,404.0078 Q648.5,403.9375 649.1094,403.0156 L650.1563,406.6719 L648.8281,407.0781 Q648.3594,405.5313 647.6953,404.8672 Q647.0313,404.2031 645.9688,404.2031 Q645.5781,404.2031 644.8125,405.7344 Q644.0469,407.2656 644.0469,409.5156 Q644.0469,411.9844 644.7109,413.375 Q645.375,414.7656 645.9063,414.7656 Q646.9688,414.7656 647.7266,414 Q648.4844,413.2344 648.8281,411.5781 L650.1563,412.1719 Q649.8281,413.5781 648.9297,414.4688 Q648.0313,415.3594 645.8281,415.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="121" x="667.75" y="415.5576">BasicTaskScheduler0</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="463" x2="961" y1="426" y2="426"/><polygon fill="none" points="473,434.0115,477,438.0115,473,442.0115,469,438.0115" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="482" y="442.606">DelayQueue fDelayQueue;</text><polygon fill="none" points="473,449.0344,477,453.0344,473,457.0344,469,453.0344" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="110" x="482" y="457.6289">HandlerSet* fHandlers;</text><polygon fill="none" points="473,464.0574,477,468.0574,473,472.0574,469,468.0574" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="135" x="482" y="472.6519">int fLastHandledSocketNum;</text><polygon fill="none" points="473,479.0803,477,483.0803,473,487.0803,469,483.0803" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="474" x="482" y="487.6748">EventTriggerId fTriggersAwaitingHandling, fLastUsedTriggerMask; // implemented as 32-bit bitmaps</text><polygon fill="none" points="473,494.1033,477,498.1033,473,502.1033,469,498.1033" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="330" x="482" y="502.6978">TaskFunc* fTriggeredEventHandlers[MAX_NUM_EVENT_TRIGGERS];</text><polygon fill="none" points="473,509.1262,477,513.1262,473,517.1262,469,513.1262" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="314" x="482" y="517.7207">void* fTriggeredEventClientDatas[MAX_NUM_EVENT_TRIGGERS];</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="463" x2="961" y1="524.1377" y2="524.1377"/><ellipse cx="473" cy="537.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="154" x="482" y="540.7437">virtual ~BasicTaskScheduler0();</text><ellipse cx="473" cy="552.1721" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="269" x="482" y="555.7666">virtual void SingleStep(unsigned maxDelayTime = 0) = 0;</text><ellipse cx="473" cy="567.1951" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="385" x="482" y="570.7896">virtual TaskToken scheduleDelayedTask(int64_t microseconds, TaskFunc* proc,</text><ellipse cx="473" cy="582.218" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="81" x="482" y="585.8125">void* clientData);</text><ellipse cx="473" cy="597.241" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="291" x="482" y="600.8354">virtual void unscheduleDelayedTask(TaskToken&amp; prevTask);</text><ellipse cx="473" cy="612.2639" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="482" y="615.8584">virtual void doEventLoop(char* watchVariable);</text><ellipse cx="473" cy="627.2869" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="347" x="482" y="630.8813">virtual EventTriggerId createEventTrigger(TaskFunc* eventHandlerProc);</text><ellipse cx="473" cy="642.3098" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="297" x="482" y="645.9043">virtual void deleteEventTrigger(EventTriggerId eventTriggerId);</text><ellipse cx="473" cy="657.3328" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="383" x="482" y="660.9272">virtual void triggerEvent(EventTriggerId eventTriggerId, void* clientData = NULL);</text><polygon fill="#FFFF44" points="473,667.3557,477,671.3557,473,675.3557,469,671.3557" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="116" x="482" y="675.9502">BasicTaskScheduler0();</text><polygon fill="#FFFF44" points="473,682.3787,477,686.3787,473,690.3787,469,686.3787" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="390" x="482" y="690.9731">unsigned fLastUsedTriggerNum; // in the range [0,MAX_NUM_EVENT_TRIGGERS)</text><!--class BasicUsageEnvironment--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="183.2065" id="BasicUsageEnvironment" style="stroke: #A80036; stroke-width: 1.5;" width="395" x="15.5" y="1143"/><ellipse cx="140.25" cy="1159" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M138.8281,1164.3594 Q136.9688,1164.3594 135.875,1162.9688 Q134.7813,1161.5781 134.7813,1158.5938 Q134.7813,1156.0625 135.9453,1154.4063 Q137.1094,1152.75 139.0938,1152.75 Q140.5625,1152.75 141.0313,1152.875 Q141.5,1153.0781 141.5,1153.0781 Q141.5,1153.0781 141.5,1153.0078 Q141.5,1152.9375 142.1094,1152.0156 L143.1563,1155.6719 L141.8281,1156.0781 Q141.3594,1154.5313 140.6953,1153.8672 Q140.0313,1153.2031 138.9688,1153.2031 Q138.5781,1153.2031 137.8125,1154.7344 Q137.0469,1156.2656 137.0469,1158.5156 Q137.0469,1160.9844 137.7109,1162.375 Q138.375,1163.7656 138.9063,1163.7656 Q139.9688,1163.7656 140.7266,1163 Q141.4844,1162.2344 141.8281,1160.5781 L143.1563,1161.1719 Q142.8281,1162.5781 141.9297,1163.4688 Q141.0313,1164.3594 138.8281,1164.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="137" x="160.75" y="1164.5576">BasicUsageEnvironment</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="16.5" x2="409.5" y1="1175" y2="1175"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="16.5" x2="409.5" y1="1183" y2="1183"/><ellipse cx="26.5" cy="1196.0115" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="369" x="35.5" y="1199.606">static BasicUsageEnvironment* createNew(TaskScheduler&amp; taskScheduler);</text><ellipse cx="26.5" cy="1211.0344" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="128" x="35.5" y="1214.6289">virtual int getErrno() const;</text><ellipse cx="26.5" cy="1226.0574" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="268" x="35.5" y="1229.6519">virtual UsageEnvironment&amp; operator&lt;&lt;(char const* str);</text><ellipse cx="26.5" cy="1241.0803" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="212" x="35.5" y="1244.6748">virtual UsageEnvironment&amp; operator&lt;&lt;(int i);</text><ellipse cx="26.5" cy="1256.1033" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="249" x="35.5" y="1259.6978">virtual UsageEnvironment&amp; operator&lt;&lt;(unsigned u);</text><ellipse cx="26.5" cy="1271.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="237" x="35.5" y="1274.7207">virtual UsageEnvironment&amp; operator&lt;&lt;(double d);</text><ellipse cx="26.5" cy="1286.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="229" x="35.5" y="1289.7437">virtual UsageEnvironment&amp; operator&lt;&lt;(void* p);</text><polygon fill="#FFFF44" points="26.5,1296.1721,30.5,1300.1721,26.5,1304.1721,22.5,1300.1721" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="35.5" y="1304.7666">BasicUsageEnvironment(TaskScheduler&amp; taskScheduler);</text><polygon fill="#FFFF44" points="26.5,1311.1951,30.5,1315.1951,26.5,1319.1951,22.5,1315.1951" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="166" x="35.5" y="1319.7896">virtual ~BasicUsageEnvironment();</text><!--class BasicTaskScheduler--><rect fill="#FEFECE" filter="url(#f4ao39r0djh4)" height="258.3213" id="BasicTaskScheduler" style="stroke: #A80036; stroke-width: 1.5;" width="620" x="404" y="810"/><ellipse cx="652.75" cy="826" fill="#ADD1B2" rx="11" ry="11" style="stroke: #A80036; stroke-width: 1.0;"/><path d="M651.3281,831.3594 Q649.4688,831.3594 648.375,829.9688 Q647.2813,828.5781 647.2813,825.5938 Q647.2813,823.0625 648.4453,821.4063 Q649.6094,819.75 651.5938,819.75 Q653.0625,819.75 653.5313,819.875 Q654,820.0781 654,820.0781 Q654,820.0781 654,820.0078 Q654,819.9375 654.6094,819.0156 L655.6563,822.6719 L654.3281,823.0781 Q653.8594,821.5313 653.1953,820.8672 Q652.5313,820.2031 651.4688,820.2031 Q651.0781,820.2031 650.3125,821.7344 Q649.5469,823.2656 649.5469,825.5156 Q649.5469,827.9844 650.2109,829.375 Q650.875,830.7656 651.4063,830.7656 Q652.4688,830.7656 653.2266,830 Q653.9844,829.2344 654.3281,827.5781 L655.6563,828.1719 Q655.3281,829.5781 654.4297,830.4688 Q653.5313,831.3594 651.3281,831.3594 Z "/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="114" x="673.25" y="831.5576">BasicTaskScheduler</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="405" x2="1023" y1="842" y2="842"/><polygon fill="none" points="415,850.0115,419,854.0115,415,858.0115,411,854.0115" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="176" x="424" y="858.606">unsigned fMaxSchedulerGranularity;</text><polygon fill="none" points="415,865.0344,419,869.0344,415,873.0344,411,869.0344" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="101" x="424" y="873.6289">int fMaxNumSockets;</text><polygon fill="none" points="415,880.0574,419,884.0574,415,888.0574,411,884.0574" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="424" y="888.6519">fd_set fReadSet;</text><polygon fill="none" points="415,895.0803,419,899.0803,415,903.0803,411,899.0803" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="82" x="424" y="903.6748">fd_set fWriteSet;</text><polygon fill="none" points="415,910.1033,419,914.1033,415,918.1033,411,914.1033" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="104" x="424" y="918.6978">fd_set fExceptionSet;</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="405" x2="1023" y1="925.1147" y2="925.1147"/><ellipse cx="415" cy="938.1262" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="496" x="424" y="941.7207">static BasicTaskScheduler* createNew(unsigned maxSchedulerGranularity = 10000 /*microseconds*/);</text><ellipse cx="415" cy="953.1492" fill="#84BE84" rx="3" ry="3" style="stroke: #038048; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="148" x="424" y="956.7437">virtual ~BasicTaskScheduler();</text><polygon fill="#FFFF44" points="415,963.1721,419,967.1721,415,971.1721,411,967.1721" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="279" x="424" y="971.7666">BasicTaskScheduler(unsigned maxSchedulerGranularity);</text><polygon fill="#FFFF44" points="415,978.1951,419,982.1951,415,986.1951,411,982.1951" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="227" x="424" y="986.7896">static void schedulerTickTask(void* clientData);</text><polygon fill="#FFFF44" points="415,993.218,419,997.218,415,1001.218,411,997.218" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="124" x="424" y="1001.8125">void schedulerTickTask();</text><polygon fill="#FFFF44" points="415,1008.241,419,1012.241,415,1016.241,411,1012.241" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="233" x="424" y="1016.8354">virtual void SingleStep(unsigned maxDelayTime);</text><polygon fill="#FFFF44" points="415,1023.2639,419,1027.2639,415,1031.2639,411,1027.2639" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="594" x="424" y="1031.8584">virtual void setBackgroundHandling(int socketNum, int conditionSet, BackgroundHandlerProc* handlerProc, void* clientData);</text><polygon fill="#FFFF44" points="415,1038.2869,419,1042.2869,415,1046.2869,411,1042.2869" style="stroke: #B38D22; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="344" x="424" y="1046.8813">virtual void moveSocketHandling(int oldSocketNum, int newSocketNum);</text><rect fill="#F24D5C" height="6" style="stroke: #C82930; stroke-width: 1.0;" width="6" x="412" y="1055.3098"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="339" x="424" y="1061.9043">int fDummySocketNum;//ifdef "defined(__WIN32__) || defined(_WIN32)"</text><!--link TaskScheduler to UsageEnvironment--><path d="M369.519,300.57 C358.101,318.6 346.315,337.203 334.581,355.726 " fill="none" id="TaskScheduler-UsageEnvironment" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#A80036" points="372.414,296,364.2221,301.4674,369.7409,300.2255,370.9828,305.7443,372.414,296" style="stroke: #A80036; stroke-width: 1.0;"/><!--link UsageEnvironment to BasicUsageEnvironment0--><path d="M213.933,755.302 C213.865,768.605 213.798,781.827 213.732,794.722 " fill="none" id="UsageEnvironment-BasicUsageEnvironment0" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="206.934,755.047,214.037,735.083,220.934,755.118,206.934,755.047" style="stroke: #A80036; stroke-width: 1.0;"/><!--link TaskScheduler to BasicTaskScheduler0--><path d="M564.754,312.99 C581.783,339.761 599.4,367.46 616.271,393.987 " fill="none" id="TaskScheduler-BasicTaskScheduler0" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="558.778,316.63,553.952,296,570.592,309.12,558.778,316.63" style="stroke: #A80036; stroke-width: 1.0;"/><!--link BasicUsageEnvironment0 to BasicUsageEnvironment--><path d="M213,1103.667 C213,1117.022 213,1130.188 213,1142.714 " fill="none" id="BasicUsageEnvironment0-BasicUsageEnvironment" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="206,1103.311,213,1083.311,220,1103.311,206,1103.311" style="stroke: #A80036; stroke-width: 1.0;"/><!--link BasicTaskScheduler0 to BasicTaskScheduler--><path d="M712.872,717.255 C713.031,748.277 713.194,780.152 713.345,809.692 " fill="none" id="BasicTaskScheduler0-BasicTaskScheduler" style="stroke: #A80036; stroke-width: 1.0; stroke-dasharray: 7.0,7.0;"/><polygon fill="none" points="705.871,717.06,712.769,697.024,719.871,716.988,705.871,717.06" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
class UsageEnvironment {
    + Boolean reclaim();
    + TaskScheduler& taskScheduler();
    + typedef char const* MsgString;
    + virtual MsgString getResultMsg() const = 0;
    + virtual void setResultMsg(MsgString msg);
    + virtual void setResultMsg(MsgString msg1, MsgString msg2) = 0;
    + virtual void setResultMsg(MsgString msg1, MsgString msg2, MsgString msg3) = 0;
    + virtual void setResultErrMsg(MsgString msg, int err = 0) = 0;
    + virtual void appendToResultMsg(MsgString msg) = 0;
    + virtual void reportBackgroundError() = 0;
    + virtual void internalError(); 
    + virtual int getErrno() const = 0;
    + virtual UsageEnvironment& operator<<(char const* str) = 0;
    + virtual UsageEnvironment& operator<<(int i) = 0;
    + virtual UsageEnvironment& operator<<(unsigned u) = 0;
    + virtual UsageEnvironment& operator<<(double d) = 0;
    + virtual UsageEnvironment& operator<<(void* p) = 0;
    + void* liveMediaPriv;
    + void* groupsockPriv;
    # UsageEnvironment(TaskScheduler& scheduler);
    # virtual ~UsageEnvironment();
    - TaskScheduler& fScheduler;
}


class TaskScheduler {
    + virtual ~TaskScheduler();
    + virtual TaskToken scheduleDelayedTask(int64_t microseconds, TaskFunc* proc, void* clientData) = 0;
    + virtual void unscheduleDelayedTask(TaskToken& prevTask) = 0;
    + virtual void rescheduleDelayedTask(TaskToken& task, int64_t microseconds, TaskFunc* proc, void* clientData);
    + typedef void BackgroundHandlerProc(void* clientData, int mask);
    + virtual void setBackgroundHandling(int socketNum, int conditionSet, BackgroundHandlerProc* handlerProc, void* clientData) = 0;
    + void disableBackgroundHandling(int socketNum) { setBackgroundHandling(socketNum, 0, NULL, NULL); }
    + virtual void moveSocketHandling(int oldSocketNum, int newSocketNum) = 0;
    + virtual void doEventLoop(char* watchVariable = NULL) = 0;
    + virtual EventTriggerId createEventTrigger(TaskFunc* eventHandlerProc) = 0;
    + virtual void deleteEventTrigger(EventTriggerId eventTriggerId) = 0;
    + virtual void triggerEvent(EventTriggerId eventTriggerId, void* clientData = NULL) = 0;
    + void turnOnBackgroundReadHandling(int socketNum, BackgroundHandlerProc* handlerProc, void* clientData);        
    + void turnOffBackgroundReadHandling(int socketNum) { disableBackgroundHandling(socketNum); }
    + virtual void internalError(); // used to 'handle' a 'should not occur'-type error condition within the library.
    # TaskScheduler();
}
TaskScheduler <- - UsageEnvironment


class BasicUsageEnvironment0 {
    + virtual MsgString getResultMsg() const;
    + virtual void setResultMsg(MsgString msg);
    + virtual void setResultMsg(MsgString msg1,
        MsgString msg2);
    + virtual void setResultMsg(MsgString msg1,
        MsgString msg2,
        MsgString msg3);
    + virtual void setResultErrMsg(MsgString msg, int err = 0);
    + virtual void appendToResultMsg(MsgString msg);
    + virtual void reportBackgroundError();
    # BasicUsageEnvironment0(TaskScheduler& taskScheduler);
    # virtual ~BasicUsageEnvironment0();
    - void reset();
    - char fResultMsgBuffer[RESULT_MSG_BUFFER_MAX];
    - unsigned fCurBufferSize;
    - unsigned fBufferMaxSize;
}
UsageEnvironment <|.. BasicUsageEnvironment0


class BasicTaskScheduler0 {
    + virtual ~BasicTaskScheduler0();
    + virtual void SingleStep(unsigned maxDelayTime = 0) = 0;
    + virtual TaskToken scheduleDelayedTask(int64_t microseconds, TaskFunc* proc,
    +     void* clientData);
    + virtual void unscheduleDelayedTask(TaskToken& prevTask);
    + virtual void doEventLoop(char* watchVariable);
    + virtual EventTriggerId createEventTrigger(TaskFunc* eventHandlerProc);
    + virtual void deleteEventTrigger(EventTriggerId eventTriggerId);
    + virtual void triggerEvent(EventTriggerId eventTriggerId, void* clientData = NULL);
    # BasicTaskScheduler0();
    # DelayQueue fDelayQueue;
    # HandlerSet* fHandlers;
    # int fLastHandledSocketNum;
    # EventTriggerId fTriggersAwaitingHandling, fLastUsedTriggerMask; // implemented as 32-bit bitmaps
    # TaskFunc* fTriggeredEventHandlers[MAX_NUM_EVENT_TRIGGERS];
    # void* fTriggeredEventClientDatas[MAX_NUM_EVENT_TRIGGERS];
    # unsigned fLastUsedTriggerNum; // in the range [0,MAX_NUM_EVENT_TRIGGERS)
}
TaskScheduler <|.. BasicTaskScheduler0


class BasicUsageEnvironment {
    + static BasicUsageEnvironment* createNew(TaskScheduler& taskScheduler);
    + virtual int getErrno() const;
    + virtual UsageEnvironment& operator<<(char const* str);
    + virtual UsageEnvironment& operator<<(int i);
    + virtual UsageEnvironment& operator<<(unsigned u);
    + virtual UsageEnvironment& operator<<(double d);
    + virtual UsageEnvironment& operator<<(void* p);
    # BasicUsageEnvironment(TaskScheduler& taskScheduler);
    # virtual ~BasicUsageEnvironment();
}
BasicUsageEnvironment0 <|.. BasicUsageEnvironment


class BasicTaskScheduler {
    + static BasicTaskScheduler* createNew(unsigned maxSchedulerGranularity = 10000 /*microseconds*/);
    + virtual ~BasicTaskScheduler();
    # BasicTaskScheduler(unsigned maxSchedulerGranularity);
    # static void schedulerTickTask(void* clientData);
    # void schedulerTickTask();
    # virtual void SingleStep(unsigned maxDelayTime);
    # virtual void setBackgroundHandling(int socketNum, int conditionSet, BackgroundHandlerProc* handlerProc, void* clientData);
    # virtual void moveSocketHandling(int oldSocketNum, int newSocketNum);
    # unsigned fMaxSchedulerGranularity;
    # int fMaxNumSockets;
    # fd_set fReadSet;
    # fd_set fWriteSet;
    # fd_set fExceptionSet;
    - int fDummySocketNum;//ifdef "defined(__WIN32__) || defined(_WIN32)"
    
}
BasicTaskScheduler0 <|.. BasicTaskScheduler


@enduml

PlantUML version 1.2018.00(Fri Jan 05 03:42:56 CST 2018)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_131-b11
Operating System: Windows 10
OS Version: 10.0
Default Encoding: GBK
Language: zh
Country: CN
--></g></svg>